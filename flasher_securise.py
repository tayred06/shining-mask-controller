#!/usr/bin/env python3
"""
üî• FLASHER S√âCURIS√â - Installation firmware SANS FL√àCHE
=======================================================
Flasher avec v√©rifications de s√©curit√© et sauvegarde
"""

import asyncio
import sys
import os
import struct
import time
import hashlib
from pathlib import Path
from bleak import BleakClient, BleakScanner
from Crypto.Cipher import AES

# Importer la cl√© et utilitaires depuis l'impl√©mentation valid√©e
import sys as _sys
import os as _os
_cur = _os.path.dirname(_os.path.abspath(__file__))
_work = _os.path.join(_cur, 'src', 'working')
_sys.path.insert(0, _work)
try:
    from complete_text_display import ENCRYPTION_KEY as WORKING_AES_KEY
except Exception:
    WORKING_AES_KEY = bytes.fromhex('32672f7974ad43451d9c6c894a0e8764')

# Configuration du masque
DEVICE_NAME = "MASK-3B9D97"
COMMAND_UUID = "d44bc439-abfd-45a2-b575-925416129600"
DATA_UUID = "d44bc439-abfd-45a2-b575-92541612960a"

# Cl√© AES (identique √† celle du protocole normal)
AES_KEY = WORKING_AES_KEY

class SecureFirmwareFlasher:
    def __init__(self):
        self.client = None
        self.cipher = AES.new(AES_KEY, AES.MODE_ECB)
        self.backup_dir = Path("firmware_backups")
        self.backup_dir.mkdir(exist_ok=True)
        
    async def preflight_check(self) -> bool:
        """Petit test de connectivit√© + chiffrement avant flash."""
        print("\nüß™ Pr√©-v√©rifications (connectivit√©/chiffrement)...")
        try:
            # Construire une commande LIGHT pour 1 puis retour 150
            cmd_tag = b"LIGHT" + b"\x00" * 11  # 16 octets pour le tag
            # Le protocole r√©el attend le bloc chiffr√© du tag, suivi du payload en clair
            enc_tag = self.cipher.encrypt(cmd_tag)
            # Baisser un peu
            await self.client.write_gatt_char(COMMAND_UUID, enc_tag + bytes([1]))
            await asyncio.sleep(0.2)
            # Restaurer
            await self.client.write_gatt_char(COMMAND_UUID, enc_tag + bytes([150]))
            await asyncio.sleep(0.2)
            print("‚úÖ Pr√©-v√©rifications OK")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è  Pr√©-v√©rifications √©chou√©es: {e}")
            return False
        
    async def find_and_connect(self):
        """Trouve et se connecte au masque avec v√©rifications"""
        print("üîç Recherche du masque...")
        
        devices = await BleakScanner.discover(timeout=10.0)
        mask_device = None
        
        for device in devices:
            if device.name and DEVICE_NAME in device.name:
                mask_device = device
                break
        
        if not mask_device:
            print(f"‚ùå Masque {DEVICE_NAME} non trouv√©")
            print("üí° V√©rifiez que le masque est allum√© et proche")
            return False
        
        print(f"üîó Connexion √† {mask_device.name}...")
        self.client = BleakClient(mask_device.address)
        
        try:
            await self.client.connect()
            print("‚úÖ Connect√©!")
            # Petit d√©lai pour stabilit√© BLE
            await asyncio.sleep(0.5)
            return True
        except Exception as e:
            print(f"‚ùå Erreur de connexion: {e}")
            return False
    
    async def backup_current_firmware(self):
        """Tente de sauvegarder le firmware actuel"""
        print("üíæ Tentative de sauvegarde du firmware actuel...")
        
        try:
            # Commandes pour lire le firmware (bas√©es sur l'analyse)
            read_commands = [
                b"FWREAD\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
                b"DUMP\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
                b"BACKUP\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            ]
            
            for cmd in read_commands:
                try:
                    # Essayer avec et sans chiffrement
                    await self.send_command(cmd, encrypt=True)
                    await asyncio.sleep(0.5)
                    await self.send_command(cmd, encrypt=False)
                    await asyncio.sleep(0.5)
                except:
                    continue
            
            print("‚ö†Ô∏è  Sauvegarde automatique non support√©e")
            print("üí° Le firmware original pourra √™tre r√©cup√©r√© via les fichiers .backup")
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur sauvegarde: {e}")
            return True  # Continuer quand m√™me
    
    async def send_command(self, command_bytes, encrypt=True):
        """Envoie une commande (optionnellement chiffr√©e)"""
        if encrypt:
            # Assurer que la taille est multiple de 16 pour AES
            padded = command_bytes + b'\x00' * (16 - len(command_bytes) % 16)
            encrypted = self.cipher.encrypt(padded)
            await self.client.write_gatt_char(COMMAND_UUID, encrypted)
        else:
            await self.client.write_gatt_char(COMMAND_UUID, command_bytes)
    
    async def send_data_chunk(self, data_chunk):
        """Envoie un chunk de donn√©es"""
        await self.client.write_gatt_char(DATA_UUID, data_chunk)
    
    async def verify_firmware_file(self, firmware_path):
        """V√©rifie l'int√©grit√© du fichier firmware"""
        print(f"üîç V√©rification du firmware: {firmware_path}")
        
        if not os.path.exists(firmware_path):
            print(f"‚ùå Firmware non trouv√©: {firmware_path}")
            return False
        
        file_size = os.path.getsize(firmware_path)
        print(f"üìä Taille du firmware: {file_size} bytes")
        
        # V√©rifier que c'est un firmware modifi√© (doit contenir "_NO_ARROW")
        if "_NO_ARROW" not in firmware_path:
            print("‚ö†Ô∏è  Ce n'est pas un firmware modifi√©!")
            return False
        
        # Calculer le hash pour v√©rification
        with open(firmware_path, 'rb') as f:
            firmware_data = f.read()
            file_hash = hashlib.md5(firmware_data).hexdigest()
            print(f"üîê Hash MD5: {file_hash[:8]}...")
        
        # V√©rifier que le firmware semble valide (taille raisonnable)
        if file_size < 10000 or file_size > 200000:
            print(f"‚ö†Ô∏è  Taille de firmware suspecte: {file_size}")
            response = input("‚ùì Continuer malgr√© tout? (oui/non): ").lower()
            return response in ['oui', 'o', 'yes', 'y']
        
        print("‚úÖ Firmware v√©rifi√©")
        return True
    
    async def enter_flash_mode(self):
        """Entre en mode flash avec s√©quence s√©curis√©e"""
        print("üîß Entr√©e en mode flash...")
        
        # S√©quences d'entr√©e en mode flash (plus s√ªres)
        flash_sequences = [
            # S√©quence 1: Standard OTA
            [
                b"OTAMODE\x00\x00\x00\x00\x00\x00\x00\x00\x00",
                b"FLASHEN\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            ],
            # S√©quence 2: Bootloader
            [
                b"BOOTLOAD\x00\x00\x00\x00\x00\x00\x00\x00",
                b"PROGRAM\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            ],
            # S√©quence 3: Update mode
            [
                b"UPDATE\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
                b"READY\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            ]
        ]
        
        for i, sequence in enumerate(flash_sequences, 1):
            print(f"üß™ Test s√©quence {i}/{len(flash_sequences)}...")
            
            for cmd in sequence:
                try:
                    # Essayer sans chiffrement d'abord
                    await self.send_command(cmd, encrypt=False)
                    print(f"üì§ Envoy√©: {cmd[:8]}...")
                    await asyncio.sleep(1.0)
                except Exception as e:
                    print(f"‚ö†Ô∏è  Erreur: {e}")
            
            # Tester si le mode flash est actif
            try:
                test_cmd = b"FLASHTEST\x00\x00\x00\x00\x00\x00\x00"
                await self.send_command(test_cmd, encrypt=False)
                await asyncio.sleep(0.5)
                print(f"‚úÖ S√©quence {i} envoy√©e")
            except:
                continue
        
        print("üîß S√©quences flash envoy√©es")
        return True
    
    async def flash_firmware_secure(self, firmware_path):
        """Flash le firmware avec m√©thode s√©curis√©e"""
        print(f"üöÄ Flashage s√©curis√©: {firmware_path}")
        
        with open(firmware_path, 'rb') as f:
            firmware_data = f.read()
        
        print(f"üì¶ Donn√©es firmware: {len(firmware_data)} bytes")
        
        # Entrer en mode flash
        await self.enter_flash_mode()
        
        # Flash par petits chunks avec v√©rification
        chunk_size = 256  # Plus petit pour la s√©curit√©
        total_chunks = (len(firmware_data) + chunk_size - 1) // chunk_size
        
        print(f"üì§ Flash en {total_chunks} chunks de {chunk_size} bytes...")
        
        for i in range(total_chunks):
            start = i * chunk_size
            end = min(start + chunk_size, len(firmware_data))
            chunk = firmware_data[start:end]
            
            # Padding si n√©cessaire
            if len(chunk) < chunk_size:
                chunk += b'\x00' * (chunk_size - len(chunk))
            
            try:
                # En-t√™te de chunk avec num√©ro
                chunk_header = struct.pack('<I', i)  # Num√©ro de chunk en little-endian
                
                # Envoyer l'en-t√™te
                header_cmd = b"CHUNK\x00\x00\x00\x00\x00\x00" + chunk_header
                await self.send_command(header_cmd, encrypt=False)
                await asyncio.sleep(0.1)
                
                # Envoyer les donn√©es
                await self.send_data_chunk(chunk)
                
                progress = (i + 1) / total_chunks * 100
                print(f"‚è≥ Progress: {progress:.1f}% ({i+1}/{total_chunks})")
                
                # D√©lai de s√©curit√© entre chunks
                await asyncio.sleep(0.3)
                
                # V√©rification p√©riodique (tous les 10 chunks)
                if (i + 1) % 10 == 0:
                    print(f"üîç V√©rification √† {progress:.0f}%...")
                    verify_cmd = b"VERIFY\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                    await self.send_command(verify_cmd, encrypt=False)
                    await asyncio.sleep(0.5)
                
            except Exception as e:
                print(f"‚ùå Erreur chunk {i}: {e}")
                print("‚ö†Ô∏è  Tentative de r√©cup√©ration...")
                await asyncio.sleep(1.0)
                
                # Tentative de r√©cup√©ration
                try:
                    recovery_cmd = b"RECOVER\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                    await self.send_command(recovery_cmd, encrypt=False)
                    await asyncio.sleep(2.0)
                    continue
                except:
                    print("‚ùå √âchec de r√©cup√©ration")
                    return False
        
        # Finalisation s√©curis√©e
        print("üèÅ Finalisation du flash...")
        finalize_commands = [
            b"FINALIZE\x00\x00\x00\x00\x00\x00\x00\x00",
            b"COMPLETE\x00\x00\x00\x00\x00\x00\x00\x00",
            b"REBOOT\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        ]
        
        for cmd in finalize_commands:
            try:
                await self.send_command(cmd, encrypt=False)
                print(f"üîß {cmd[:8].decode('utf-8', errors='ignore')}...")
                await asyncio.sleep(1.0)
            except Exception as e:
                print(f"‚ö†Ô∏è  {cmd[:8]}: {e}")
        
        print("‚úÖ Flash termin√©!")
        return True

async def secure_flash_process():
    """Processus complet de flashage s√©curis√©"""
    print("üî• FLASHAGE S√âCURIS√â - FIRMWARE SANS FL√àCHE")
    print("=" * 60)
    
    # S√©lection du firmware
    firmware_files = [
        "TR1906R04-1-10_OTA.bin_NO_ARROW.bin",
        "TR1906R04-10_OTA.bin_NO_ARROW.bin"
    ]
    
    print("üìÅ Firmwares modifi√©s disponibles:")
    for i, fw in enumerate(firmware_files):
        if os.path.exists(fw):
            size = os.path.getsize(fw)
            print(f"{i+1}. {fw} ({size} bytes)")
        else:
            print(f"{i+1}. {fw} (‚ùå Non trouv√©)")
    
    # Utiliser le premier disponible
    firmware_path = None
    for fw in firmware_files:
        if os.path.exists(fw):
            firmware_path = fw
            break
    
    if not firmware_path:
        print("‚ùå Aucun firmware modifi√© trouv√©!")
        return False
    
    print(f"üéØ Firmware s√©lectionn√©: {firmware_path}")
    
    flasher = SecureFirmwareFlasher()
    
    try:
        # √âTAPE 1: Connexion
        if not await flasher.find_and_connect():
            return False
        
        # √âTAPE 1b: Pr√©-v√©rifications (obligatoire avant d'aller plus loin)
        if not await flasher.preflight_check():
            print("‚ùå Pr√©-v√©rifications √©chou√©es - abandon")
            return False
        
        # √âTAPE 2: V√©rification du firmware
        if not await flasher.verify_firmware_file(firmware_path):
            return False
        
        # √âTAPE 3: Sauvegarde (tentative)
        await flasher.backup_current_firmware()
        
        # AVERTISSEMENT FINAL
        print("\n" + "="*60)
        print("‚ö†Ô∏è  AVERTISSEMENT FINAL ‚ö†Ô∏è")
        print("üî• Vous allez flasher un firmware modifi√©!")
        print("üíÄ Risque d'endommagement du masque!")
        print("üö´ Pas de garantie de retour en arri√®re!")
        print("üõ°Ô∏è  Fichiers de sauvegarde: TR1906R04-*.bin.out.backup")
        print("="*60)
        
        print("\nüéØ FIRMWARE √Ä INSTALLER:")
        print(f"üìÅ {firmware_path}")
        print("üéä Effet: Suppression d√©finitive de la fl√®che d'upload")
        
        response = input("\n‚ùì CONFIRMER LE FLASHAGE? (TAPEZ 'FLASHER' pour confirmer): ")
        
        if response.upper() != 'FLASHER':
            print("‚ùå Flashage annul√©")
            return False
        
        # √âTAPE 4: Flashage
        print("\nüöÄ D√âBUT DU FLASHAGE...")
        print("‚ö†Ô∏è  NE PAS D√âBRANCHER LE MASQUE!")
        
        success = await flasher.flash_firmware_secure(firmware_path)
        
        if success:
            print("\nüéâ FLASHAGE TERMIN√â!")
            print("üéØ Firmware sans fl√®che install√©!")
            print("üß™ Testez maintenant l'envoi de texte...")
            print("üí° La fl√®che d'upload devrait avoir disparu!")
            
            # Test imm√©diat
            print("\nüß™ TEST IMM√âDIAT...")
            await asyncio.sleep(3)  # Laisser le masque red√©marrer
            
            print("üîÑ Reconnexion pour test...")
            await flasher.client.disconnect()
            await asyncio.sleep(2)
            
            if await flasher.find_and_connect():
                print("‚úÖ Reconnect√©! Le firmware fonctionne!")
            else:
                print("‚ö†Ô∏è  Probl√®me de reconnexion - v√©rifiez le masque")
        else:
            print("\n‚ùå √âCHEC DU FLASHAGE")
            print("üõ†Ô∏è  Le masque devrait toujours fonctionner")
        
        return success
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        return False
        
    finally:
        if flasher.client and flasher.client.is_connected:
            await flasher.client.disconnect()
            print("üîå D√©connect√©")

if __name__ == "__main__":
    asyncio.run(secure_flash_process())
