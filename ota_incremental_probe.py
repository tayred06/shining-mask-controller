#!/usr/bin/env python3
"""
üîé OTA INCREMENTAL PROBE
=========================
Envoie de tr√®s petites commandes chiffr√©es et √©coute des notifications
pour d√©couvrir la s√©quence OTA/bootloader utilis√©e par le masque.

Principe de s√©curit√©:
- Aucune √©criture de gros blocs de donn√©es (pas d'UPLOAD_CHAR)
- Uniquement des "pings" courts sur la caract√©ristique commande
- D√©lai et journalisation apr√®s chaque essai
"""

import asyncio
import os
import sys
from datetime import datetime
from Crypto.Cipher import AES
from Crypto.Hash import CMAC
from typing import Tuple
import itertools
import argparse


# Ajouter src/working au path
_cur = os.path.dirname(os.path.abspath(__file__))
_work = os.path.join(_cur, 'src', 'working')
sys.path.insert(0, _work)

# Chargement robuste via importlib (√©vite les erreurs d'analyse statique)
import importlib.util as _importlib_util

_ctd_path = os.path.join(_work, 'complete_text_display.py')
_spec = _importlib_util.spec_from_file_location('complete_text_display', _ctd_path)
if _spec is None or _spec.loader is None:
    raise RuntimeError(f"Impossible de charger complete_text_display depuis {_ctd_path}")
_ctd = _importlib_util.module_from_spec(_spec)
_spec.loader.exec_module(_ctd)

# Exposer les symboles n√©cessaires
MaskTextDisplay = _ctd.MaskTextDisplay
COMMAND_CHAR = _ctd.COMMAND_CHAR
NOTIFY_CHAR = _ctd.NOTIFY_CHAR


class OTAProbe(MaskTextDisplay):
    """Sonde OTA √† pas tr√®s fin, non destructive."""

    def __init__(self):
        super().__init__()
        self.log_lines = []
        self.raw_events = []
        # Chars additionnels potentiels pour OTA/DFU
        self.FD_WRITE = "0000fd01-0000-1000-8000-00805f9b34fb"
        self.FD_NOTIFY = "0000fd02-0000-1000-8000-00805f9b34fb"
        self.AE_WRITE = "0000ae01-0000-1000-8000-00805f9b34fb"
        self.AE_NOTIFY = "0000ae02-0000-1000-8000-00805f9b34fb"
        # Capture dernier paquet AE02 et signalisation
        self.last_ae02 = None
        self.raw_event_evt = asyncio.Event()
        # Infos p√©riph√©rique (pour d√©rivations de cl√©s)
        self.device_name = None
        self.device_address = None

    def log(self, msg: str):
        line = f"[{datetime.now().strftime('%H:%M:%S.%f')[:-3]}] {msg}"
        print(line)
        self.log_lines.append(line)

    async def send_and_listen(self, cmd_ascii: str, args: bytes = b"", wait_s: float = 0.8):
        """Envoie une commande minuscule et √©coute les notifs pendant un court d√©lai."""
        # Snapshot des r√©ponses existantes, puis purge locale
        pre_count = len(self.responses)

        try:
            payload = self.create_command(cmd_ascii, args)
            await self.client.write_gatt_char(COMMAND_CHAR, payload)
            self.log(f"üì§ {cmd_ascii} ({len(args)}B args)")
        except Exception as e:
            self.log(f"‚ö†Ô∏è Envoi {cmd_ascii} √©chou√©: {e}")
            return []

        # Attente br√®ve pour capter des notifs √©ventuelles
        try:
            await asyncio.sleep(wait_s)
        except asyncio.CancelledError:
            pass

        # Collecter les nouvelles r√©ponses apparues depuis l'envoi
        new = []
        if len(self.responses) > pre_count:
            new = self.responses[pre_count:]
            for r in new:
                self.log(f"üì® {r}")
        else:
            self.log("üï≥Ô∏è Aucune notification nouvelle")

        return new

    async def run_safe_probe(self):
        """S√©quence de sondes OTA prudente."""
        self.log("üîó Connexion et pr√©paration des notifications‚Ä¶")
        # Pr√©-scan pour capturer nom/adresse (utiles pour d√©rivations)
        try:
            from bleak import BleakScanner
            devs = await BleakScanner.discover(timeout=3.0)
            for d in devs:
                if (d.name or '').upper().startswith('MASK'):
                    self.device_name = d.name or None
                    self.device_address = getattr(d, 'address', None)
                    break
        except Exception:
            pass
        if not await self.connect():
            self.log("‚ùå Connexion impossible")
            return False

        try:
            # Dump initial services/characteristics
            await self.dump_services("avant_sonde")

            # Activer des notifications suppl√©mentaires si disponibles
            await self.enable_extra_notifications()

            # Pr√©flight: tr√®s petit changement de luminosit√© pour valider la cl√©/pipe
            self.log("üß™ Pr√©flight LIGHT‚Ä¶")
            await self.send_and_listen("LIGHT", bytes([1]), 0.3)
            await self.send_and_listen("LIGHT", bytes([150]), 0.3)

            # Groupe 1: introspection/statut (sans changer de mode)
            group1 = [
                ("FWVER", b""), ("VER", b""), ("VERS", b""), ("INFO", b""),
                ("STAT", b""), ("SYS", b""), ("DBG", b"")
            ]
            self.log("üîç Groupe 1: introspection")
            for cmd, args in group1:
                await self.send_and_listen(cmd, args, 0.6)

            # Groupe 2: requ√™tes d'√©tat de mode/OTA (idempotentes si non support√©es)
            group2 = [
                ("OTA", b"\x00"), ("OTA", b"\x01"), ("OTAMODE", b""),
                ("UPDATE", b""), ("UPDT", b""), ("UPGD", b""),
                ("FLASH", b""), ("BOOT", b""), ("PROGRAM", b""), ("READY", b"")
            ]
            self.log("üß™ Groupe 2: sonde modes OTA/bootloader")
            for cmd, args in group2:
                await self.send_and_listen(cmd, args, 1.0)

            # Groupe 2b: pings bruts sur services suspects (FD/AE)
            self.log("üß™ Groupe 2b: pings bruts sur FD01/AE01")
            for payload in (b"\x00", b"\x01", b"\xaa", b"OTA\x01", b"PING"):
                await self.write_raw(self.FD_WRITE, payload, response=True)
                await asyncio.sleep(0.5)
                await self.write_raw(self.AE_WRITE, payload, response=False)
                await asyncio.sleep(0.5)

            # Groupe 2c: bloc chiffr√© type commande envoy√© sur FD/AE (prudence)
            self.log("üß™ Groupe 2c: motif chiffr√© OTA sur FD/AE")
            enc_ota = self.create_command("OTA", b"\x01")
            await self.write_raw(self.FD_WRITE, enc_ota[:16], response=True)
            await asyncio.sleep(0.8)
            await self.write_raw(self.AE_WRITE, enc_ota[:16], response=False)
            await asyncio.sleep(0.8)

            # Groupe 2cbis: si challenge AE02 disponible, tenter des r√©ponses prudentes
            await self.challenge_response_probe()

            # Groupe 2d: √©criture directe sur FD02 (write+notify) - patterns triviaux
            self.log("üß™ Groupe 2d: patterns triviaux sur FD02 (write+notify)")
            for p in (b"\x00", b"\x01", b"\x55", b"\xaa", b"\x01\x00", b"\x00\x01"):
                await self.write_raw(self.FD_NOTIFY, p, response=True)
                await asyncio.sleep(0.6)

            # Groupe 2e: motifs ASCII courts
            self.log("üß™ Groupe 2e: motifs ASCII courts sur FD02/AE01")
            for p in (b"DFU", b"OTA", b"BOOT", b"PING", b"HELLO"):
                await self.write_raw(self.FD_NOTIFY, p, response=True)
                await asyncio.sleep(0.5)
                await self.write_raw(self.AE_WRITE, p, response=False)
                await asyncio.sleep(0.5)

            # Groupe 3: l√©gers pings de suivi apr√®s tentative d'OTA
            group3 = [("STAT", b""), ("INFO", b""), ("VER", b"")]
            self.log("üîÅ Groupe 3: re-check status apr√®s sonde OTA")
            for cmd, args in group3:
                await self.send_and_listen(cmd, args, 0.6)

            # Dump services/characteristics apr√®s sonde OTA
            await self.dump_services("apres_sonde")
            # Tentative de mapping handles (BlueZ uniquement, best-effort)
            await self.dump_handle_mapping()

            # Scan rapide pour rep√©rer un p√©riph√©rique DFU/OTA √©ventuel
            await self.scan_for_dfu()

            # Balayage final tr√®s prudent
            await self.safe_sweep()

            # Token-hunt + r√©ponses candidates
            await self.token_hunt_and_responses(max_tries=4, wait_token=2.0)

            # Mode burst exp√©rimental (brute-force plus serr√©) si variable d'env BURST=1
            if os.environ.get("BURST") == "1":
                self.log("üöÄ Mode BURST activ√© (exp√©rimental)")
                try:
                    await self.burst_handshake(rounds=2)
                except Exception as e:
                    self.log(f"‚ö†Ô∏è burst_handshake: {e}")

            self.log("‚úÖ Sondes termin√©es")
            return True

        finally:
            # Sauvegarde du log minimal
            try:
                with open("ota_probe.log", "w") as f:
                    f.write("\n".join(self.log_lines) + "\n")
                self.log("üíæ Log √©crit dans ota_probe.log")
                if self.raw_events:
                    with open("ota_raw.log", "w") as rf:
                        rf.write("\n".join(self.raw_events) + "\n")
                    self.log("üíæ Log brut √©crit dans ota_raw.log")
            except Exception as e:
                self.log(f"‚ö†Ô∏è √âcriture log √©chou√©e: {e}")

            if self.client:
                try:
                    await self.client.stop_notify(NOTIFY_CHAR)
                except Exception:
                    pass
                # D√©sactiver extra notifs si actives
                for extra in (self.FD_NOTIFY, self.AE_NOTIFY):
                    try:
                        await self.client.stop_notify(extra)
                    except Exception:
                        pass
                # Log final mapping handles si possible avant disconnect
                try:
                    await self.dump_handle_mapping()
                except Exception:
                    pass
                try:
                    await self.client.disconnect()
                    self.log("üîå D√©connect√©")
                except Exception:
                    pass

    async def dump_services(self, label: str):
        """Log des services/characteristics pr√©sents."""
        try:
            # Compat: certaines versions exposent .services (propri√©t√©) sans get_services()
            svcs = getattr(self.client, "services", None)
            if svcs is None:
                get_services = getattr(self.client, "get_services", None)
                if callable(get_services):
                    svcs = await get_services()
            if svcs is None:
                self.log("‚ö†Ô∏è Impossible d'obtenir la liste des services (API non support√©e)")
                return

            # svcs peut √™tre un ServiceCollection (dict-like) ou similaire
            services = []
            try:
                # bleak >=0.21: svcs.services dict
                services = list(getattr(svcs, "services", {}).values())
            except Exception:
                pass
            if not services:
                # Fallback: iterable direct
                try:
                    services = list(svcs)
                except Exception:
                    services = []

            self.log(f"üß≠ Services {label}: {len(services)} services")
            for s in services:
                suuid = getattr(s, "uuid", str(s))
                chars = getattr(s, "characteristics", [])
                self.log(f"  ‚Ä¢ Service {suuid}")
                for ch in chars:
                    cuuid = getattr(ch, "uuid", str(ch))
                    props = ",".join(getattr(ch, "properties", []) or [])
                    self.log(f"     - Char {cuuid} [{props}]")
        except Exception as e:
            self.log(f"‚ö†Ô∏è dump_services: {e}")

    async def scan_for_dfu(self):
        """Scan en p√©riph√©rie d‚Äôun mode DFU/OTA."""
        from bleak import BleakScanner
        try:
            self.log("üîé Scan p√©riph√©riques post-OTA (3s)‚Ä¶")
            devs = await BleakScanner.discover(timeout=3.0)
            hits = []
            for d in devs:
                name = (d.name or "").upper()
                if any(tag in name for tag in ["DFU", "OTA", "BOOT"]):
                    hits.append(f"{d.name} ({d.address})")
            if hits:
                for h in hits:
                    self.log(f"üõ†Ô∏è Candidat DFU/OTA: {h}")
            else:
                self.log("üß© Aucun p√©riph√©rique DFU/OTA d√©tect√©")
        except Exception as e:
            self.log(f"‚ö†Ô∏è scan_for_dfu: {e}")

    def _derive_ids(self) -> Tuple[bytes, bytes]:
        """Retourne (mac6, name_hex3x2) si d√©tect√©s, sinon (b'', b'').
        - mac6: 6 octets de l'adresse MAC si au format standard XX:XX:XX:XX:XX:XX
        - name_hex3x2: si le nom est MASK-XXXXXX (hex 6), renvoie ces 3 octets r√©p√©t√©s x2 (6B)
        """
        mac6 = b""
        name6 = b""
        # Adresse BLE si disponible (sur macOS, peut √™tre un UUID CoreBluetooth)
        try:
            addr = (self.client.address if getattr(self, 'client', None) else None) or self.device_address or ''
            if isinstance(addr, str) and ':' in addr and len(addr.split(':')) == 6:
                parts = addr.split(':')
                mac6 = bytes(int(p, 16) for p in parts)
        except Exception:
            pass
        # Suffixe de nom MASK-XXXXXX
        try:
            name = self.device_name or ''
            up = name.upper()
            if up.startswith('MASK-') and len(up) >= 11:
                hex6 = up[5:11]
                if all(c in '0123456789ABCDEF' for c in hex6):
                    b3 = bytes.fromhex(hex6)
                    name6 = b3 + b3  # 3 octets r√©p√©t√©s pour former 6B
        except Exception:
            pass
        return mac6, name6

    @staticmethod
    def _crc8(data: bytes, poly: int = 0x07, init: int = 0x00) -> int:
        """CRC-8 (ATM) simple, pour tenter un framing compact (1 octet)."""
        crc = init & 0xFF
        for b in data:
            crc ^= b
            for _ in range(8):
                if crc & 0x80:
                    crc = ((crc << 1) ^ poly) & 0xFF
                else:
                    crc = (crc << 1) & 0xFF
        return crc

    def _raw_notify_handler(self, sender: str, data: bytes):
        su = getattr(sender, "uuid", sender)
        s = str(su).lower()
        is_ae = s.startswith("0000ae02-")
        is_fd = s.startswith("0000fd02-")
        tag = "AE02" if is_ae else ("FD02" if is_fd else s)
        hexdata = data.hex()
        line = f"üì° {tag} notif: {hexdata}"
        self.raw_events.append(line)
        self.log(line)

        # Tentative de d√©chiffrement AES-ECB par blocs de 16
        try:
            if hasattr(self, "cipher") and len(data) >= 16:
                dec_all = b""
                for off in range(0, len(data) // 16 * 16, 16):
                    dec_all += self.cipher.decrypt(data[off:off+16])
                # Log brut + ASCII filtr√©
                asci = ''.join(chr(b) if 32 <= b <= 126 else '.' for b in dec_all)
                self.log(f"üîì {tag} dec: {dec_all.hex()} | {asci}")
        except Exception:
            pass

        # M√©moriser AE02 et signaler
        try:
            if is_ae:
                self.last_ae02 = data
                self.raw_event_evt.set()
        except Exception:
            pass

    async def enable_extra_notifications(self):
        """Souscrire aux notifs des services suspects si pr√©sents."""
        try:
            svcs = getattr(self.client, "services", None)
            available = set()
            if svcs is not None:
                try:
                    services = list(getattr(svcs, "services", {}).values()) or list(svcs)
                except Exception:
                    services = []
                for s in services:
                    for ch in getattr(s, "characteristics", []):
                        available.add(str(getattr(ch, "uuid", "")).lower())

            for char in (self.FD_NOTIFY, self.AE_NOTIFY):
                if char.lower() in available:
                    try:
                        await self.client.start_notify(char, self._raw_notify_handler)
                        self.log(f"üîî Notifications activ√©es sur {char}")
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è start_notify {char}: {e}")
        except Exception as e:
            self.log(f"‚ö†Ô∏è enable_extra_notifications: {e}")

    async def dump_handle_mapping(self):
        """Best-effort: essayer d'afficher UUID -> handle (BlueZ/Linux)."""
        try:
            backend = getattr(self.client, "_backend", None)
            printed = False
            # bleak >=0.21 BlueZ backend: backend._characteristics: dict[handle] = BleakGATTCharacteristicBlueZDBus
            chars_map = getattr(backend, "_characteristics", None)
            if isinstance(chars_map, dict) and chars_map:
                self.log("üßæ Mapping handles (brut backend._characteristics):")
                for h, ch in sorted(chars_map.items()):
                    try:
                        uuid = getattr(ch, "uuid", "?")
                        props = ",".join(getattr(ch, "properties", []) or [])
                        self.log(f"   ‚Ä¢ 0x{h:04X} -> {uuid} [{props}]")
                        printed = True
                    except Exception:
                        continue
            # Fallback: parcourir services
            svcs = getattr(self.client, "services", None)
            try:
                services = list(getattr(svcs, "services", {}).values()) or list(svcs) or []
            except Exception:
                services = []
            for s in services:
                for ch in getattr(s, "characteristics", []):
                    h = getattr(ch, "handle", None)
                    if isinstance(h, int):
                        uuid = getattr(ch, "uuid", "?")
                        props = ",".join(getattr(ch, "properties", []) or [])
                        self.log(f"   ‚Ä¢ 0x{h:04X} -> {uuid} [{props}]")
                        printed = True
            if not printed:
                self.log("‚ÑπÔ∏è dump_handle_mapping: aucun handle accessible (plateforme restreinte)")
        except Exception as e:
            self.log(f"‚ö†Ô∏è dump_handle_mapping: {e}")

    async def write_raw(self, char_uuid: str, data: bytes, response: bool):
        """√âcrit un petit payload brut sur une caract√©ristique donn√©e (prudence)."""
        try:
            # Limiter prudemment √† 20B (ATT sans segmentation, MTU par d√©faut ~23)
            payload = data[:20] if data else b"\x00"
            await self.client.write_gatt_char(char_uuid, payload, response=response)
            self.log(f"üì§ RAW->{char_uuid[-4:]} {payload.hex()}")
        except Exception as e:
            self.log(f"‚ö†Ô∏è write_raw {char_uuid[-4:]}: {e}")

    async def get_ae02_token(self, timeout: float = 1.5):
        """Demande un token sur AE01 (0x00) et renvoie les 16 octets si pr√©sents."""
        try:
            self.last_ae02 = None
            self.raw_event_evt.clear()
            await self.write_raw(self.AE_WRITE, b"\x00", response=False)
            try:
                await asyncio.wait_for(self.raw_event_evt.wait(), timeout=timeout)
            except asyncio.TimeoutError:
                return None
            pkt = self.last_ae02 or b""
            if len(pkt) >= 17 and pkt[0] == 0x01:
                token = pkt[1:17]
                self.log(f"üß© Token AE02: {token.hex()}")
                return token
            return None
        except Exception as e:
            self.log(f"‚ö†Ô∏è get_ae02_token: {e}")
            return None

    async def challenge_response_probe(self):
        """Si un token AE02 est pr√©sent, tenter quelques √©chos prudents."""
        token = await self.get_ae02_token()
        if not token:
            self.log("üß™ Aucun token AE02 obtenu")
            return
        # 1) √âcho brut sur FD02 (write+notify)
        await self.write_raw(self.FD_NOTIFY, token, response=True)
        await asyncio.sleep(0.6)
        # 2) √âcho brut sur AE01
        await self.write_raw(self.AE_WRITE, token, response=False)
        await asyncio.sleep(0.6)
        # 3) Pr√©fixe 0x02 + token sur FD02
        await self.write_raw(self.FD_NOTIFY, b"\x02" + token[:15], response=True)
        await asyncio.sleep(0.8)
        # 4) Variante chiffr√©e: chiffrer token et envoyer sur FD02
        try:
            enc = self.cipher.encrypt(token)
            await self.write_raw(self.FD_NOTIFY, enc, response=True)
            await asyncio.sleep(0.8)
        except Exception:
            pass

    async def safe_sweep(self):
        """Balayage prudent: 1 octet sur [0x00..0x0F] sur AE01 et FD02."""
        self.log("üß™ Sweep s√ªr 0x00..0x0F sur AE01 et FD02")
        for val in range(0x00, 0x10):
            b = bytes([val])
            await self.write_raw(self.AE_WRITE, b, response=False)
            await asyncio.sleep(0.2)
            await self.write_raw(self.FD_NOTIFY, b, response=True)
            await asyncio.sleep(0.5)

    async def token_hunt_and_responses(self, max_tries: int = 3, wait_token: float = 2.0):
        """Boucle: tenter d'obtenir un token AE02 puis tester plusieurs r√©ponses candidates."""
        self.log("üß™ Token-hunt: AE02 + r√©ponses candidates")
        tokens = []
        for i in range(max_tries):
            self.log(f"üîÑ Demande token AE02 (try {i+1}/{max_tries})")
            tok = await self.get_ae02_token(timeout=wait_token)
            if not tok:
                continue
            hex_tok = tok.hex()
            if hex_tok not in [t.hex() for t in tokens]:
                tokens.append(tok)
            # R√©ponses candidates (16B max). On tente d'abord tr√®s vite 1-2 variantes.
            variants = []  # (name, payload, fast)
            mac6, name6 = self._derive_ids()
            # D√©rivations de cl√©s potentielles √† partir de l'identit√©
            key_app = _ctd.ENCRYPTION_KEY
            # utilitaires
            def _pad16(b: bytes) -> bytes:
                if not b:
                    return b"\x00" * 16
                reps = (16 + len(b) - 1) // len(b)
                return (b * reps)[:16]
            def _cmac(key: bytes, data: bytes) -> bytes:
                c = CMAC.new(key, ciphermod=AES)
                c.update(data)
                return c.digest()
            key_mac_pad = _pad16(mac6)
            key_name_pad = _pad16(name6)
            cand_keys = []
            try:
                cand_keys.append(("cmac(app,mac)", _cmac(key_app, key_mac_pad)))
            except Exception:
                pass
            try:
                cand_keys.append(("cmac(app,name)", _cmac(key_app, key_name_pad)))
            except Exception:
                pass
            try:
                cand_keys.append(("app^mac", bytes([a ^ b for a, b in zip(key_app, key_mac_pad or b"\x00"*16)])))
            except Exception:
                pass
            try:
                cand_keys.append(("app^name", bytes([a ^ b for a, b in zip(key_app, key_name_pad or b"\x00"*16)])))
            except Exception:
                pass
            # identit√©
            variants.append(("id", tok, True))
            # reverse
            variants.append(("rev", tok[::-1], False))
            # xor AA
            variants.append(("xAA", bytes([b ^ 0xAA for b in tok]), False))
            # AES ECB known key
            try:
                variants.append(("aesK", self.cipher.encrypt(tok), False))
            except Exception:
                pass
            # AES ECB key reversed
            try:
                key_rev = _ctd.ENCRYPTION_KEY[::-1]
                enc_rev = AES.new(key_rev, AES.MODE_ECB).encrypt(tok)
                variants.append(("aesKr", enc_rev, False))
            except Exception:
                pass
            # AES on reversed token
            try:
                variants.append(("aes(trev)", self.cipher.encrypt(tok[::-1]), False))
            except Exception:
                pass
            # AES on tok^AA
            try:
                tok_xaa = bytes([b ^ 0xAA for b in tok])
                variants.append(("aes(xAA)", self.cipher.encrypt(tok_xaa), False))
            except Exception:
                pass

            # D√©chiffrer le token (si c'√©tait chiffr√© avec notre cl√©), puis renvoyer d√©cod√©
            try:
                dec = self.cipher.decrypt(tok)
                variants.append(("decK", dec, False))
            except Exception:
                pass
            # CMAC-AES sur token (RFC4493), tronqu√© √† 16
            try:
                cobj = CMAC.new(_ctd.ENCRYPTION_KEY, ciphermod=AES)
                cobj.update(tok)
                mac = cobj.digest()
                variants.append(("cmacK", mac[:16], False))
            except Exception:
                pass
            # CMAC avec identifiants: 0x02||CMAC_Kapp(token||id)
            try:
                if mac6:
                    macv = _cmac(key_app, tok + mac6)
                    variants.append(("02+cmac(tok|mac)", b"\x02" + macv[:16], True))
                    variants.append(("cmac(tok|mac)", macv[:16], False))
                if name6:
                    macv2 = _cmac(key_app, tok + name6)
                    variants.append(("02+cmac(tok|name)", b"\x02" + macv2[:16], True))
                    variants.append(("cmac(tok|name)", macv2[:16], False))
            except Exception:
                pass
            # AES avec le token comme cl√© (si le bootloader attend une PRF K=token)
            try:
                key_tok = tok[:16]
                enc_tk = AES.new(key_tok, AES.MODE_ECB).encrypt(tok)
                variants.append(("aesK=tok", enc_tk, False))
            except Exception:
                pass
            # AES avec cl√© d√©riv√©e token^AA
            try:
                key_der = bytes([b ^ 0xAA for b in tok[:16]])
                enc_der = AES.new(key_der, AES.MODE_ECB).encrypt(tok)
                variants.append(("aesK=tok^AA", enc_der, False))
            except Exception:
                pass
            # AES avec cl√©s candidates d√©riv√©es de l'identit√©
            for kname, k in cand_keys:
                try:
                    enc_idk = AES.new(k, AES.MODE_ECB).encrypt(tok)
                    variants.append((f"aesK={kname}", enc_idk, False))
                except Exception:
                    pass

            # Framing compact avec CRC (16B total)
            try:
                # token[0:15] + crc(token[0:15])
                p = tok[:15]
                crc = self._crc8(p)
                variants.append(("tok+crc", p + bytes([crc]), True))
            except Exception:
                pass
            try:
                # 0x01 + tok[0:14] + crc(0x01||tok[0:14])
                p = b"\x01" + tok[:14]
                crc = self._crc8(p)
                variants.append(("01+tok14+crc", p + bytes([crc]), False))
            except Exception:
                pass
            try:
                # 0x10 (len=16?) + tok[0:14] + crc(0x10||tok[0:14])
                p = b"\x10" + tok[:14]
                crc = self._crc8(p)
                variants.append(("10+tok14+crc", p + bytes([crc]), False))
            except Exception:
                pass
            try:
                # tok[0:15] + sum modulo 256
                p = tok[:15]
                s = sum(p) & 0xFF
                variants.append(("tok+sum", p + bytes([s]), False))
            except Exception:
                pass

            # Variantes 17 octets (si accept√©es par FD02): 0x01||tok, 0x02||tok, 0x11||tok, tok||0x01, 0x02||CMAC(tok)
            try:
                variants.append(("01+tok", b"\x01" + tok, True))
            except Exception:
                pass
            try:
                variants.append(("02+tok", b"\x02" + tok, False))
            except Exception:
                pass
            try:
                variants.append(("11+tok", b"\x11" + tok, False))
            except Exception:
                pass
            try:
                variants.append(("tok+01", tok + b"\x01", False))
            except Exception:
                pass
            try:
                cobj = CMAC.new(_ctd.ENCRYPTION_KEY, ciphermod=AES)
                cobj.update(tok)
                mac = cobj.digest()
                variants.append(("02+cmac", b"\x02" + mac[:16], False))
            except Exception:
                pass

            # Variantes ASCII avec verbe + token, tronqu√©es √† 20B
            verbs = [b"OTA", b"DFU", b"BOOT", b"ERASE", b"START", b"INIT", b"DATA", b"DONE", b"UPDT"]
            for v in verbs:
                try:
                    cap = 20 - len(v)
                    variants.append((f"{v.decode()}+tok", v + tok[:max(0, cap)], False))
                except Exception:
                    pass
            # Pr√©fixe 0x01 + verbe
            for v in verbs[:5]:  # limiter un peu
                try:
                    cap = 20 - (1 + len(v))
                    variants.append((f"01+{v.decode()}+tok", b"\x01" + v + tok[:max(0, cap)], False))
                except Exception:
                    pass

            # Envoi: FD02 (write+notify), puis AE01 echo, puis FD01; petite attente cibl√©e
            for name, data, fast in variants:
                self.log(f"üì¶ R√©ponse {name} -> FD02")
                await self.write_raw(self.FD_NOTIFY, data, response=True)
                await asyncio.sleep(0.15 if fast else 0.8)
                self.log(f"üì¶ Echo {name} -> AE01")
                await self.write_raw(self.AE_WRITE, data, response=False)
                await asyncio.sleep(0.15 if fast else 0.6)
                self.log(f"üì¶ R√©plique {name} -> FD01")
                await self.write_raw(self.FD_WRITE, data, response=True)
                # Attente cibl√©e d'un √©ventuel nouveau token AE02 juste apr√®s
                try:
                    self.last_ae02 = None
                    self.raw_event_evt.clear()
                    await asyncio.wait_for(self.raw_event_evt.wait(), timeout=0.45 if fast else 0.8)
                    if self.last_ae02:
                        self.log(f"üß© AE02 apr√®s {name}: {self.last_ae02.hex()}")
                except Exception:
                    pass

        self.log(f"üßæ Tokens vus: {[t.hex() for t in tokens]}")

    async def fast_handshake(self, attempts: int = 3):
        """Mode rapide: token -> rafale de frames structur√©es serr√©es (<50ms).
        Objectif: d√©tecter tout changement (nouveau token imm√©diat, notif suppl√©mentaire FD02).
        """
        self.log("‚ö° FAST-HANDSHAKE d√©marrage")
        if not await self.connect():
            self.log("‚ùå Connexion impossible")
            return
        try:
            await self.enable_extra_notifications()
            # Pr√©parer mapping handles (utile log)
            await self.dump_handle_mapping()
            for i in range(attempts):
                self.log(f"üîÑ Token round {i+1}/{attempts}")
                tok = await self.get_ae02_token(timeout=2.0)
                if not tok:
                    self.log("‚è≥ Pas de token obtenu")
                    continue
                # Construire frames candidates ordonn√©es
                frames = []  # (label, payload)
                # 1. Echo bruts
                frames.append(("id-FD02", tok))
                frames.append(("id-AE01", tok))
                # 2. Pr√©fixes contr√¥le
                for p in (b"\x01", b"\x02", b"\x10", b"\x11"):
                    frames.append((f"{p.hex()}+tok", p + tok))
                # 3. CRC / SUM framings (tok[0:15]+crc)
                try:
                    p = tok[:15]; crc = self._crc8(p)
                    frames.append(("tok15+crc", p + bytes([crc])))
                except Exception:
                    pass
                try:
                    p = b"\x01" + tok[:14]; crc = self._crc8(p)
                    frames.append(("01+tok14+crc", p + bytes([crc])))
                except Exception:
                    pass
                # 4. AES transforms
                try:
                    frames.append(("aes(app)", self.cipher.encrypt(tok)))
                except Exception:
                    pass
                # 5. CMAC variants
                try:
                    c = CMAC.new(_ctd.ENCRYPTION_KEY, ciphermod=AES); c.update(tok); frames.append(("cmac16", c.digest()[:16]))
                except Exception:
                    pass
                # 6. Sequence pattern: short ACK + encrypted token
                try:
                    enc_tok = self.cipher.encrypt(tok)
                    frames.append(("SEQ-01", b"\x01"))
                    frames.append(("SEQ-01+enc", b"\x01" + enc_tok[:15]))
                except Exception:
                    pass
                # 7. Verb+token truncated
                for v in (b"OTA", b"DFU", b"BOOT"):
                    cap = 20 - len(v)
                    frames.append((f"{v.decode()}+tok", v + tok[:max(0, cap)]))

                self.log(f"üöö Envoi {len(frames)} frames candidates")
                for label, payload in frames:
                    # Sur FD02 (write request) pour retour √©ventuel
                    await self.write_raw(self.FD_NOTIFY, payload, response=True)
                    # Ecoute tr√®s courte pour token frais
                    self.last_ae02 = None
                    self.raw_event_evt.clear()
                    try:
                        await asyncio.wait_for(self.raw_event_evt.wait(), timeout=0.06)
                        if self.last_ae02:
                            self.log(f"üÜï Nouveau token apr√®s {label}: {self.last_ae02.hex()}")
                            break
                    except asyncio.TimeoutError:
                        pass
                # Echo global token sur AE01 √† la fin si rien
                await self.write_raw(self.AE_WRITE, tok, response=False)
            self.log("‚úÖ FAST-HANDSHAKE termin√©")
        finally:
            try:
                await self.dump_handle_mapping()
            except Exception:
                pass
            if self.client:
                try:
                    await self.client.disconnect()
                except Exception:
                    pass

    async def fast_handshake2(self, attempts: int = 3, preinit_fd01: bool = False):
        """Mode ultra-rapide structur√© (fast2).
        S√©quence stricte: (optionnel) pr√©-init FD01, demande token, rafale ordonn√©e de frames sur FD02 sans pause.
        Chrono pr√©cis pour latences.
        Arr√™t anticip√© si nouveau token appara√Æt avant qu'on r√©√©mette AE01=00.
        """
        self.log("‚ö° FAST2 d√©marrage")
        if not await self.connect():
            self.log("‚ùå Connexion impossible")
            return
        try:
            await self.enable_extra_notifications()
            await self.dump_handle_mapping()
            loop = asyncio.get_event_loop()
            for r in range(attempts):
                self.log(f"üîÅ FAST2 round {r+1}/{attempts}")
                if preinit_fd01:
                    # pr√©-init simple: 00,01,02 sur FD01 rapidement
                    for b in (b"\x00", b"\x01", b"\x02"):
                        await self.write_raw(self.FD_WRITE, b, response=True)
                        await asyncio.sleep(0.01)
                # Demande token
                start_round = loop.time()
                tok = await self.get_ae02_token(timeout=1.2)
                if not tok:
                    self.log("‚è≥ Aucune notif token")
                    continue
                token_time = loop.time()
                self.log(f"‚è±Ô∏è Token obtenu en {(token_time-start_round)*1000:.1f} ms")
                # Construire frames structur√©es (liste de tuples label,payload)
                frames = []
                def crc8(d: bytes) -> int:
                    return self._crc8(d)
                # 1) Echo basiques
                frames.append(("ECHO", tok))
                frames.append(("ECHO+01", b"\x01"+tok))
                # 2) CMAC / AES combos
                try:
                    c = CMAC.new(_ctd.ENCRYPTION_KEY, ciphermod=AES); c.update(tok); cm = c.digest()
                    frames.append(("CMAC16", cm[:16]))
                    frames.append(("01+CMAC", b"\x01"+cm[:15]))
                except Exception:
                    pass
                try:
                    enc = self.cipher.encrypt(tok)
                    frames.append(("AES(app)", enc))
                    frames.append(("01+AES", b"\x01"+enc[:15]))
                except Exception:
                    pass
                # 3) Framing opcode + token + checksum
                base = tok[:14]
                c1 = crc8(b"\x10"+base)
                frames.append(("10+tok14+crc", b"\x10"+base+bytes([c1])))
                c2 = crc8(b"\x11"+base)
                frames.append(("11+tok14+crc", b"\x11"+base+bytes([c2])))
                # 4) Splitting token (4+4+4+4) avec opcodes incr√©mentaux
                t = tok
                parts = [t[0:4], t[4:8], t[8:12], t[12:16]]
                for idx, p in enumerate(parts):
                    frames.append((f"SEQ{idx+1}", bytes([0x20+idx])+p))
                frames.append(("SEQ-FINAL", b"\x2F"+tok[:15]))
                # 5) Verb+token TLV style: 0x30 len verb token[...]
                for verb in (b"OTA", b"DFU"):
                    remain = 20 - (1+1+len(verb))
                    body = verb + tok[:max(0, remain)]
                    frames.append((f"TLV-{verb.decode()}", b"\x30"+bytes([len(body)])+body) )
                # 6) tok15 + sum, tok15 + crc
                p15 = tok[:15]
                frames.append(("tok15+crc", p15+bytes([crc8(p15)])))
                frames.append(("tok15+sum", p15+bytes([sum(p15)&0xFF])))
                self.log(f"üöö FAST2 frames: {len(frames)}")
                # Rafale sur FD02 sans attendre, puis v√©rif apr√®s chaque mini lot
                batch_size = 4
                sent = 0
                for i in range(0, len(frames), batch_size):
                    batch = frames[i:i+batch_size]
                    for label, payload in batch:
                        await self.write_raw(self.FD_NOTIFY, payload, response=True)
                        sent += 1
                    # √©coute tr√®s courte (fen√™tre 25 ms)
                    self.last_ae02 = None
                    self.raw_event_evt.clear()
                    try:
                        await asyncio.wait_for(self.raw_event_evt.wait(), timeout=0.025)
                        if self.last_ae02:
                            new_tok = self.last_ae02.hex()
                            self.log(f"üÜï Token interm√©diaire apr√®s {sent} frames: {new_tok}")
                            break
                    except asyncio.TimeoutError:
                        pass
                # Echo global + struct finale si rien
                if not self.last_ae02:
                    await self.write_raw(self.AE_WRITE, tok, response=False)
                end_round = loop.time()
                self.log(f"‚è±Ô∏è Round {r+1} termin√© en {(end_round-start_round)*1000:.1f} ms")
            self.log("‚úÖ FAST2 termin√©")
        finally:
            try:
                await self.dump_handle_mapping()
            except Exception:
                pass
            if self.client:
                try:
                    await self.client.disconnect()
                except Exception:
                    pass


def _build_arg_parser():
    p = argparse.ArgumentParser(description="OTA incremental / fast handshake probe")
    p.add_argument("--fast-handshake", action="store_true", help="Activer mode handshake rapide")
    p.add_argument("--fast2", action="store_true", help="Activer mode handshake ultra-rapide structur√©")
    p.add_argument("--attempts", type=int, default=3, help="Nombre de rounds fast-handshake")
    p.add_argument("--preinit-fd01", action="store_true", help="Dans fast2: envoie une s√©quence d'init sur FD01 avant chaque token")
    p.add_argument("--burst", action="store_true", help="Activer mode BURST apr√®s sonde safe")
    return p


async def _main_async(args):
    probe = OTAProbe()
    if args.fast_handshake:
        await probe.fast_handshake(attempts=args.attempts)
    elif args.fast2:
        await probe.fast_handshake2(attempts=args.attempts, preinit_fd01=args.preinit_fd01)
    else:
        if args.burst:
            os.environ["BURST"] = "1"
        await probe.run_safe_probe()


def main():
    args = _build_arg_parser().parse_args()
    try:
        asyncio.run(_main_async(args))
    except KeyboardInterrupt:
        print("\nInterrupted")


if __name__ == "__main__":
    main()

    async def burst_handshake(self, rounds: int = 2):
        """Tentative agressive mais courte de r√©ponses handshake en rafale.
        Hypoth√®se: r√©ponse attendue = f(token) sur FD02 en <50ms.
        On envoie s√©ries de frames compactes puis variants multi-√©tapes.
        S√©curit√©: limite stricte du nombre total (< 220 frames).
        """
        self.log("üß™ BURST: d√©marrage")
        total_sent = 0
        for r in range(rounds):
            tok = await self.get_ae02_token(timeout=2.0)
            if not tok:
                self.log("BURST: pas de token, stop")
                break
            self.log(f"BURST round {r+1}/{rounds} token={tok.hex()}")
            # Transformations principales
            def xor_const(b, c):
                return bytes([x ^ c for x in b])
            transforms = {
                "id": lambda t: t,
                "rev": lambda t: t[::-1],
                "xaa": lambda t: xor_const(t, 0xAA),
                "x55": lambda t: xor_const(t, 0x55),
                "xff": lambda t: xor_const(t, 0xFF),
                "rol1": lambda t: t[1:]+t[:1],
            }
            # AES / CMAC variants
            try:
                transforms["aes"] = lambda t: self.cipher.encrypt(t)
            except Exception:
                pass
            try:
                def _cmac(t):
                    c = CMAC.new(_ctd.ENCRYPTION_KEY, ciphermod=AES); c.update(t); return c.digest()
                transforms["cmac"] = _cmac
                transforms["cmac01"] = lambda t: _cmac(b"\x01"+t)
            except Exception:
                pass
            # Pr√©fixes potentiels
            prefixes = [b"", b"\x01", b"\x02", b"\x11", b"\x10", b"\x55", b"\xAA"]
            # Postfix options (CRC8 / SUM)
            def crc8(d):
                return bytes([self._crc8(d)])
            def ssum(d):
                return bytes([sum(d)&0xFF])
            postfixers = [lambda d: d, lambda d: d[:15]+crc8(d[:15]), lambda d: d[:15]+ssum(d[:15])]
            # Build first wave single-frame
            wave = []
            for name,(pfx, (tname, tf), post) in enumerate(itertools.product(prefixes, transforms.items(), postfixers)):
                base = tf(tok)
                if not base:
                    continue
                frame_core = post(base)
                frame = (pfx + frame_core)[:20]
                wave.append((f"{tname}|{pfx.hex()}|{post.__name__ if hasattr(post,'__name__') else 'p'}", frame))
                if len(wave) >= 140:  # cap
                    break
            self.log(f"BURST wave frames: {len(wave)}")
            # Envoi rapide sur FD02 uniquement (write+notify) puis √©coute d'un nouveau token
            for label, frame in wave:
                if total_sent > 220:
                    self.log("BURST limite atteinte")
                    return
                total_sent += 1
                await self.write_raw(self.FD_NOTIFY, frame, response=True)
                # √©coute courte
                try:
                    self.last_ae02 = None
                    self.raw_event_evt.clear()
                    await asyncio.wait_for(self.raw_event_evt.wait(), timeout=0.05)
                    if self.last_ae02:
                        self.log(f"BURST: nouveau AE02 apr√®s {label}: {self.last_ae02.hex()}")
                        break  # passer round suivant
                except asyncio.TimeoutError:
                    pass
            # Deuxi√®me phase (s√©quences 2 frames): ACK puis frame principale
            seq_prefixes = [b"\x01", b"\x02"]
            for p in seq_prefixes:
                if total_sent > 220:
                    break
                base = tok
                frame2 = p + (self.cipher.encrypt(base) if hasattr(self,'cipher') else base)
                await self.write_raw(self.FD_NOTIFY, p, response=True)
                await asyncio.sleep(0.015)
                await self.write_raw(self.FD_NOTIFY, frame2[:20], response=True)
                total_sent += 2
                try:
                    self.last_ae02 = None
                    self.raw_event_evt.clear()
                    await asyncio.wait_for(self.raw_event_evt.wait(), timeout=0.08)
                    if self.last_ae02:
                        self.log(f"BURST: AE02 apr√®s sequence {p.hex()} -> {self.last_ae02.hex()}")
                        break
                except asyncio.TimeoutError:
                    pass
        self.log(f"BURST termin√©, frames envoy√©es: {total_sent}")


async def main():
    probe = OTAProbe()
    await probe.run_safe_probe()


if __name__ == "__main__":
    asyncio.run(main())
