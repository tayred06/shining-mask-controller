#!/usr/bin/env python3
"""
üîß SOLUTIONS ALTERNATIVES - Contournement Fl√®che Firmware
=========================================================

Puisque la fl√®che semble √™tre hardcod√©e dans le firmware du masque,
explorons diff√©rentes approches pour la contourner ou la masquer.
"""

import asyncio
import sys
import os
from bleak import BleakClient, BleakScanner
from Crypto.Cipher import AES
import struct

# Ajouter le r√©pertoire des modules au path
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'src'))

# Configuration
ENCRYPTION_KEY = bytes.fromhex('32672f7974ad43451d9c6c894a0e8764')
COMMAND_CHAR = "d44bc439-abfd-45a2-b575-925416129600"
UPLOAD_CHAR = "d44bc439-abfd-45a2-b575-92541612960a"
NOTIFY_CHAR = "d44bc439-abfd-45a2-b575-925416129601"

class AlternativeUploadMethods:
    """Teste diff√©rentes m√©thodes pour √©viter la fl√®che firmware"""
    
    def __init__(self):
        self.client = None
        self.cipher = AES.new(ENCRYPTION_KEY, AES.MODE_ECB)
        self.responses = []
        self.notification_event = asyncio.Event()
    
    def create_command(self, cmd_str, data=b''):
        """Cr√©e une commande chiffr√©e"""
        cmd = bytearray()
        cmd.append(len(cmd_str) + len(data))
        cmd.extend(cmd_str.encode('ascii'))
        cmd.extend(data)
        
        while len(cmd) < 16:
            cmd.append(0)
        
        return self.cipher.encrypt(bytes(cmd))
    
    def _notification_handler(self, sender, data):
        """Gestionnaire des notifications"""
        try:
            response = data.decode('ascii', errors='ignore').strip('\x00')
            if response:
                print(f"üì® {response}")
                self.responses.append(response)
                self.notification_event.set()
        except Exception as e:
            print(f"‚ùå Erreur notification: {e}")
    
    async def connect(self):
        """Connexion au masque"""
        print("üîç Recherche du masque...")
        devices = await BleakScanner.discover()
        
        mask = None
        for device in devices:
            if "MASK" in (device.name or ""):
                mask = device
                break
        
        if not mask:
            print("‚ùå Masque non trouv√©")
            return False
        
        print(f"üîó Connexion √† {mask.name}...")
        self.client = BleakClient(mask.address)
        await self.client.connect()
        await self.client.start_notify(NOTIFY_CHAR, self._notification_handler)
        print("‚úÖ Connect√©!")
        return True
    
    async def wait_for_response(self, expected, timeout=5):
        """Attend une r√©ponse sp√©cifique"""
        start_time = asyncio.get_event_loop().time()
        
        while asyncio.get_event_loop().time() - start_time < timeout:
            for i, response in enumerate(self.responses):
                if expected in response:
                    self.responses.pop(i)
                    return True
            
            try:
                await asyncio.wait_for(self.notification_event.wait(), timeout=0.5)
                self.notification_event.clear()
            except asyncio.TimeoutError:
                continue
        
        return False
    
    async def method_1_brightness_masking(self):
        """M√©thode 1: Masquer avec luminosit√© nulle pendant upload"""
        print("\nüîß M√âTHODE 1: Masquage par luminosit√©")
        print("Concept: R√©duire luminosit√© √† 0 pendant upload, puis restaurer")
        
        # Sauvegarder luminosit√© actuelle
        print("üí° Sauvegarde luminosit√©...")
        original_brightness = 150  # Valeur par d√©faut
        
        # R√©duire √† 0 avant upload
        print("üîá Luminosit√© √† 0 (masquage fl√®che)...")
        cmd = self.create_command("LIGHT", bytes([0]))
        await self.client.write_gatt_char(COMMAND_CHAR, cmd)
        await asyncio.sleep(0.5)
        
        # Upload normal avec fl√®che invisible
        print("üì§ Upload avec fl√®che masqu√©e...")
        await self._upload_sample_text("HI")
        
        # Restaurer luminosit√©
        print("üí° Restauration luminosit√©...")
        cmd = self.create_command("LIGHT", bytes([original_brightness]))
        await self.client.write_gatt_char(COMMAND_CHAR, cmd)
        
        print("‚úÖ M√©thode 1 termin√©e")
        return True
    
    async def method_2_rapid_mode_switching(self):
        """M√©thode 2: Commutation rapide de mode pour "masquer" la fl√®che"""
        print("\nüîß M√âTHODE 2: Commutation rapide de mode")
        print("Concept: Changer rapidement de mode pour perturber l'affichage de la fl√®che")
        
        # Commutation rapide OFF/ON
        print("‚ö° Commutation rapide OFF...")
        cmd = self.create_command("MODE", bytes([0]))  # Mode OFF
        await self.client.write_gatt_char(COMMAND_CHAR, cmd)
        await asyncio.sleep(0.1)
        
        # Upload pendant mode OFF
        print("üì§ Upload en mode OFF...")
        await self._upload_sample_text("TEST")
        
        # Retour au mode normal
        print("‚ö° Retour mode STEADY...")
        cmd = self.create_command("MODE", bytes([1]))  # Mode STEADY
        await self.client.write_gatt_char(COMMAND_CHAR, cmd)
        
        print("‚úÖ M√©thode 2 termin√©e")
        return True
    
    async def method_3_ultra_fast_upload(self):
        """M√©thode 3: Upload ultra-rapide pour minimiser la dur√©e de la fl√®che"""
        print("\nüîß M√âTHODE 3: Upload ultra-rapide")
        print("Concept: Upload si rapide que la fl√®che est √† peine visible")
        
        # Pr√©parer donn√©es √† l'avance
        text = "FAST"
        bitmap_data, color_data = self._prepare_minimal_data(text)
        
        print("‚ö° Upload ultra-rapide (pas de d√©lais)...")
        
        # DATS imm√©diat
        total_len = len(bitmap_data) + len(color_data)
        dats_cmd = bytearray([9])
        dats_cmd.extend(b"DATS")
        dats_cmd.extend(struct.pack('>H', total_len))
        dats_cmd.extend(struct.pack('>H', len(bitmap_data)))
        dats_cmd.extend([0])
        while len(dats_cmd) < 16:
            dats_cmd.append(0)
        
        # Envoi imm√©diat sans attendre DATSOK
        encrypted = self.cipher.encrypt(bytes(dats_cmd))
        await self.client.write_gatt_char(COMMAND_CHAR, encrypted)
        
        # Upload imm√©diat (risqu√© mais rapide)
        complete_data = bitmap_data + color_data
        packet = bytearray([len(complete_data) + 1, 0])
        packet.extend(complete_data)
        await self.client.write_gatt_char(UPLOAD_CHAR, bytes(packet))
        
        # DATCP imm√©diat
        datcp_cmd = bytearray([5])
        datcp_cmd.extend(b"DATCP")
        while len(datcp_cmd) < 16:
            datcp_cmd.append(0)
        encrypted = self.cipher.encrypt(bytes(datcp_cmd))
        await self.client.write_gatt_char(COMMAND_CHAR, encrypted)
        
        print("‚úÖ M√©thode 3 termin√©e (upload ~100ms)")
        return True
    
    async def method_4_background_color_trick(self):
        """M√©thode 4: Utiliser couleur de fond pour masquer la fl√®che"""
        print("\nüîß M√âTHODE 4: Masquage par couleur de fond")
        print("Concept: Fond noir total pour rendre la fl√®che moins visible")
        
        # Configuration background noir intense
        print("üåë Configuration fond noir total...")
        cmd = self.create_command("BG", bytes([1, 0, 0, 0]))  # Background noir activ√©
        await self.client.write_gatt_char(COMMAND_CHAR, cmd)
        await asyncio.sleep(0.3)
        
        # Upload avec fond noir
        print("üì§ Upload avec fond noir...")
        await self._upload_sample_text("DARK")
        
        print("‚úÖ M√©thode 4 termin√©e")
        return True
    
    async def method_5_alternative_commands(self):
        """M√©thode 5: Chercher des commandes alternatives √† DATS"""
        print("\nüîß M√âTHODE 5: Commandes alternatives")
        print("Concept: Tester si d'autres commandes permettent l'upload sans fl√®che")
        
        # Tester des variantes de DATS
        alternatives = [
            "UPLOAD",  # Upload direct?
            "SEND",    # Envoi?
            "DATA",    # Donn√©es?
            "WRITE",   # √âcriture?
            "SET",     # D√©finir?
        ]
        
        for alt_cmd in alternatives:
            print(f"üß™ Test commande: {alt_cmd}")
            try:
                cmd = self.create_command(alt_cmd, bytes([0, 10]))  # Donn√©es test
                await self.client.write_gatt_char(COMMAND_CHAR, cmd)
                await asyncio.sleep(0.5)
                
                # V√©rifier la r√©ponse
                if self.responses:
                    print(f"üì® R√©ponse √† {alt_cmd}: {self.responses[-1]}")
                else:
                    print(f"üîá Pas de r√©ponse √† {alt_cmd}")
                    
            except Exception as e:
                print(f"‚ùå Erreur avec {alt_cmd}: {e}")
        
        print("‚úÖ M√©thode 5 termin√©e")
        return True
    
    def _prepare_minimal_data(self, text):
        """Pr√©pare des donn√©es minimales pour test rapide"""
        # Bitmap minimal (8 colonnes pour 1 caract√®re)
        bitmap_data = b'\x00\x7E' * len(text)  # Pattern simple
        color_data = bytes([255, 255, 255] * len(text))  # Blanc
        return bitmap_data, color_data
    
    async def _upload_sample_text(self, text):
        """Upload de test avec donn√©es minimales"""
        bitmap_data, color_data = self._prepare_minimal_data(text)
        total_len = len(bitmap_data) + len(color_data)
        
        # DATS
        dats_cmd = bytearray([9])
        dats_cmd.extend(b"DATS")
        dats_cmd.extend(struct.pack('>H', total_len))
        dats_cmd.extend(struct.pack('>H', len(bitmap_data)))
        dats_cmd.extend([0])
        while len(dats_cmd) < 16:
            dats_cmd.append(0)
        
        encrypted = self.cipher.encrypt(bytes(dats_cmd))
        await self.client.write_gatt_char(COMMAND_CHAR, encrypted)
        
        if await self.wait_for_response("DATSOK", 3):
            # Upload
            complete_data = bitmap_data + color_data
            packet = bytearray([len(complete_data) + 1, 0])
            packet.extend(complete_data)
            await self.client.write_gatt_char(UPLOAD_CHAR, bytes(packet))
            
            if await self.wait_for_response("REOK", 3):
                # DATCP
                datcp_cmd = bytearray([5])
                datcp_cmd.extend(b"DATCP")
                while len(datcp_cmd) < 16:
                    datcp_cmd.append(0)
                encrypted = self.cipher.encrypt(bytes(datcp_cmd))
                await self.client.write_gatt_char(COMMAND_CHAR, encrypted)
                
                await self.wait_for_response("DATCPOK", 3)
                return True
        
        return False
    
    async def disconnect(self):
        """D√©connexion"""
        if self.client and self.client.is_connected:
            await self.client.stop_notify(NOTIFY_CHAR)
            await self.client.disconnect()
            print("üîå D√©connect√©")

async def test_all_methods():
    """Test toutes les m√©thodes alternatives"""
    print("üß™ TEST DES M√âTHODES ALTERNATIVES ANTI-FL√àCHE")
    print("=" * 55)
    print("Objectif: Trouver une m√©thode pour contourner la fl√®che firmware")
    print()
    
    methods = AlternativeUploadMethods()
    
    if await methods.connect():
        try:
            print("üëÄ OBSERVEZ LE MASQUE pendant chaque m√©thode!")
            print("üìù Notez laquelle r√©duit ou √©limine la fl√®che")
            print()
            
            # Test toutes les m√©thodes
            await methods.method_1_brightness_masking()
            await asyncio.sleep(2)
            
            await methods.method_2_rapid_mode_switching()
            await asyncio.sleep(2)
            
            await methods.method_3_ultra_fast_upload()
            await asyncio.sleep(2)
            
            await methods.method_4_background_color_trick()
            await asyncio.sleep(2)
            
            await methods.method_5_alternative_commands()
            
            print("\nüéØ ANALYSE FINALE:")
            print("Quelle m√©thode a le mieux masqu√© la fl√®che?")
            print("1. Luminosit√© nulle")
            print("2. Commutation rapide de mode")
            print("3. Upload ultra-rapide")
            print("4. Fond noir")
            print("5. Commandes alternatives")
            print()
            print("üí° La meilleure m√©thode peut √™tre combin√©e")
            print("   avec votre syst√®me existant!")
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è Tests arr√™t√©s")
        except Exception as e:
            print(f"\n‚ùå Erreur: {e}")
            import traceback
            traceback.print_exc()
        finally:
            await methods.disconnect()
    else:
        print("‚ùå Impossible de se connecter au masque")

if __name__ == "__main__":
    asyncio.run(test_all_methods())
