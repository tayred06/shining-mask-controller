#!/usr/bin/env python3
"""
üîÑ COMMANDES ALTERNATIVES - Bypass de DATS
===========================================

Exploration de commandes firmware alternatives qui pourraient
permettre d'afficher du texte SANS utiliser DATS (et donc sans fl√®che).
"""

import asyncio
import sys
import os

# Ajouter le r√©pertoire des modules au path
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'src'))

from working.complete_text_display import MaskTextDisplay

class AlternativeCommands(MaskTextDisplay):
    """Explorateur de commandes alternatives"""
    
    def __init__(self):
        super().__init__()
    
    async def explore_alternative_commands(self):
        """Explore les commandes alternatives au firmware"""
        print("üîÑ EXPLORATION COMMANDES ALTERNATIVES")
        print("=" * 50)
        
        # Liste des commandes firmware connues (d'apr√®s les logs pr√©c√©dents)
        commands_to_test = [
            ("ANIM", "Animation command"),
            ("DRAW", "Draw command"),  
            ("PICT", "Picture command"),
            ("DISP", "Display command"),
            ("SHOW", "Show command"),
            ("LOAD", "Load command"),
            ("SEND", "Send command"),
            ("PUSH", "Push command"),
            ("WRITE", "Write command"),
            ("SET", "Set command"),
            ("PUT", "Put command"),
        ]
        
        print("üß™ Test des commandes alternatives...")
        
        for cmd, desc in commands_to_test:
            print(f"\nüîç Test: {cmd} ({desc})")
            
            try:
                # Cr√©er une commande test
                test_cmd = bytearray([len(cmd) + 1])
                test_cmd.extend(cmd.encode())
                test_cmd.extend([1, 2, 3, 4])  # Donn√©es test
                while len(test_cmd) < 16:
                    test_cmd.append(0)
                
                # Chiffrer et envoyer
                encrypted = self.cipher.encrypt(bytes(test_cmd))
                await self.client.write_gatt_char("d44bc439-abfd-45a2-b575-925416129600", encrypted)
                
                # Attendre r√©ponse
                await asyncio.sleep(0.5)
                if self.responses:
                    response = self.responses[-1]
                    print(f"  üì® R√©ponse: {response}")
                    
                    # Si on a une r√©ponse positive, approfondir
                    if "OK" in response or len(response) > 2:
                        print(f"  ‚ú® {cmd} semble reconnu!")
                        await self.test_command_deeper(cmd)
                else:
                    print(f"  ‚ùå Pas de r√©ponse pour {cmd}")
                
            except Exception as e:
                print(f"  ‚ö†Ô∏è  Erreur avec {cmd}: {e}")
            
            await asyncio.sleep(0.3)
    
    async def test_command_deeper(self, cmd):
        """Test approfondi d'une commande qui r√©pond"""
        print(f"    üî¨ Test approfondi de {cmd}...")
        
        # Essayer avec des param√®tres diff√©rents
        test_params = [
            [0, 0, 0, 0],
            [1, 0, 0, 0], 
            [0, 1, 0, 0],
            [255, 255, 255, 255],
            [100, 100, 0, 0],
        ]
        
        for params in test_params:
            try:
                test_cmd = bytearray([len(cmd) + 1])
                test_cmd.extend(cmd.encode())
                test_cmd.extend(params)
                while len(test_cmd) < 16:
                    test_cmd.append(0)
                
                encrypted = self.cipher.encrypt(bytes(test_cmd))
                await self.client.write_gatt_char("d44bc439-abfd-45a2-b575-925416129600", encrypted)
                
                await asyncio.sleep(0.3)
                if self.responses:
                    response = self.responses[-1]
                    print(f"      params {params}: {response}")
                
            except Exception as e:
                pass
    
    async def test_direct_pixel_commands(self):
        """Test de commandes directes pour pixels"""
        print("\nüé® TEST COMMANDES DIRECTES PIXELS")
        print("=" * 40)
        
        pixel_commands = [
            ("PIXEL", [10, 10, 255, 0, 0]),  # x, y, r, g, b
            ("DOT", [5, 5, 0, 255, 0]),
            ("POINT", [8, 8, 0, 0, 255]),
            ("COLOR", [255, 255, 255, 0]),
            ("RGB", [255, 0, 255, 0]),
        ]
        
        for cmd, params in pixel_commands:
            print(f"\nüé® Test: {cmd} avec {params}")
            
            try:
                test_cmd = bytearray([len(cmd) + 1])
                test_cmd.extend(cmd.encode())
                test_cmd.extend(params)
                while len(test_cmd) < 16:
                    test_cmd.append(0)
                
                encrypted = self.cipher.encrypt(bytes(test_cmd))
                await self.client.write_gatt_char("d44bc439-abfd-45a2-b575-925416129600", encrypted)
                
                await asyncio.sleep(0.5)
                if self.responses:
                    response = self.responses[-1]
                    print(f"  üì® {response}")
                    
                    if "OK" in response:
                        print(f"  ‚ú® {cmd} fonctionne! Pas de fl√®che visible?")
                        input("    üëÅÔ∏è  Y a-t-il quelque chose d'affich√©? (ENTR√âE)")
                
            except Exception as e:
                print(f"  ‚ö†Ô∏è  Erreur: {e}")
    
    async def test_immediate_display_commands(self):
        """Test de commandes d'affichage imm√©diat"""
        print("\n‚ö° TEST COMMANDES AFFICHAGE IMM√âDIAT")
        print("=" * 45)
        
        immediate_commands = [
            ("LIVE", [1]),
            ("FAST", [255]),
            ("QUICK", [1, 1]),
            ("REAL", [1, 0, 0, 0]),
            ("NOW", [255, 255, 255]),
            ("INST", [1]),
        ]
        
        for cmd, params in immediate_commands:
            print(f"\n‚ö° Test: {cmd}")
            
            try:
                test_cmd = bytearray([len(cmd) + 1])
                test_cmd.extend(cmd.encode())
                test_cmd.extend(params)
                while len(test_cmd) < 16:
                    test_cmd.append(0)
                
                encrypted = self.cipher.encrypt(bytes(test_cmd))
                await self.client.write_gatt_char("d44bc439-abfd-45a2-b575-925416129600", encrypted)
                
                await asyncio.sleep(0.3)
                if self.responses:
                    response = self.responses[-1]
                    print(f"  üì® {response}")
                
            except Exception as e:
                print(f"  ‚ö†Ô∏è  Erreur: {e}")
    
    async def test_bitmap_alternatives(self):
        """Test d'alternatives pour l'upload bitmap"""
        print("\nüñºÔ∏è  TEST ALTERNATIVES BITMAP")
        print("=" * 35)
        
        # Essayer des alternatives √† DATS
        bitmap_commands = [
            "BITS", "MAPS", "DATA", "BUFF", "FRAM", "VRAM", 
            "SCRE", "DISP", "SHOW", "DRAW", "REND"
        ]
        
        for cmd in bitmap_commands:
            print(f"\nüñºÔ∏è  Test: {cmd}")
            
            try:
                # Donn√©es bitmap minimales
                test_cmd = bytearray([len(cmd) + 1])
                test_cmd.extend(cmd.encode())
                test_cmd.extend([0, 32])  # Taille 32 bytes
                test_cmd.extend([0, 16])  # 16 bytes bitmap
                test_cmd.extend([0])
                while len(test_cmd) < 16:
                    test_cmd.append(0)
                
                encrypted = self.cipher.encrypt(bytes(test_cmd))
                await self.client.write_gatt_char("d44bc439-abfd-45a2-b575-925416129600", encrypted)
                
                await asyncio.sleep(0.5)
                if self.responses:
                    response = self.responses[-1]
                    print(f"  üì® {response}")
                    
                    if "OK" in response:
                        print(f"  üéâ {cmd} accept√©! Alternative possible √† DATS!")
                        input("    üëÅÔ∏è  Fl√®che visible? (ENTR√âE)")
                
            except Exception as e:
                print(f"  ‚ö†Ô∏è  Erreur: {e}")

async def run_alternative_exploration():
    """Lance l'exploration compl√®te"""
    explorer = AlternativeCommands()
    
    if await explorer.connect():
        try:
            print("üîÑ EXPLORATION DES ALTERNATIVES AU SYST√àME DATS")
            print("=" * 55)
            print("Objectif: trouver des commandes qui affichent du contenu")
            print("          SANS d√©clencher la fl√®che firmware")
            print()
            
            # 1. Commandes g√©n√©rales
            await explorer.explore_alternative_commands()
            
            # 2. Commandes pixels directs
            await explorer.test_direct_pixel_commands()
            
            # 3. Commandes affichage imm√©diat
            await explorer.test_immediate_display_commands()
            
            # 4. Alternatives bitmap
            await explorer.test_bitmap_alternatives()
            
            print("\nüéØ R√âSUM√â DE L'EXPLORATION")
            print("=" * 30)
            print("Si nous avons trouv√© des commandes qui r√©pondent 'OK'")
            print("et qui n'affichent PAS de fl√®che, nous avons notre solution!")
            print()
            print("Sinon, nous devrons accepter que la fl√®che est")
            print("inh√©rente au protocole firmware du masque.")
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è Exploration arr√™t√©e")
        finally:
            await explorer.disconnect()
    else:
        print("‚ùå Connexion impossible")

if __name__ == "__main__":
    asyncio.run(run_alternative_exploration())
