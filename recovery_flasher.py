#!/usr/bin/env python3
"""
üõ°Ô∏è FLASHER DE R√âCUP√âRATION - Restauration firmware original
===========================================================
Flash le firmware original en cas de probl√®me avec le firmware modifi√©
"""

import asyncio
import sys
import os
import struct
import time
import hashlib
from pathlib import Path
from bleak import BleakClient, BleakScanner
from Crypto.Cipher import AES

# Configuration du masque
DEVICE_NAME = "MASK-3B9D97"
COMMAND_UUID = "d44bc439-abfd-45a2-b575-925416129600"
DATA_UUID = "d44bc439-abfd-45a2-b575-92541612960a"

# Cl√© AES (identique √† celle du protocole normal)
AES_KEY = bytes([
    0x78, 0x61, 0x4D, 0x69, 0x6B, 0x65, 0x20, 0x4C,
    0x69, 0x75, 0x6E, 0x59, 0x75, 0x20, 0x59, 0x6F
])

class RecoveryFlasher:
    def __init__(self):
        self.client = None
        self.cipher = AES.new(AES_KEY, AES.MODE_ECB)
        
    async def find_and_connect(self):
        """Trouve et se connecte au masque (m√™me s'il est partiellement d√©faillant)"""
        print("üîç Recherche du masque (mode r√©cup√©ration)...")
        
        # Recherche plus longue en cas de probl√®me
        devices = await BleakScanner.discover(timeout=15.0)
        mask_device = None
        
        for device in devices:
            if device.name and DEVICE_NAME in device.name:
                mask_device = device
                break
            # Recherche aussi sans nom au cas o√π le masque serait partiellement d√©faillant
            elif device.address:
                print(f"üîç Dispositif trouv√©: {device.address} ({device.name})")
        
        if not mask_device:
            print(f"‚ùå Masque {DEVICE_NAME} non trouv√©")
            print("üí° Le masque pourrait √™tre en mode r√©cup√©ration")
            print("üí° V√©rifiez qu'il est allum√© et red√©marrez-le")
            return False
        
        print(f"üîó Connexion √† {mask_device.name}...")
        self.client = BleakClient(mask_device.address)
        
        try:
            await self.client.connect()
            print("‚úÖ Connect√©!")
            return True
        except Exception as e:
            print(f"‚ùå Erreur de connexion: {e}")
            return False
    
    async def send_command(self, command_bytes, encrypt=True):
        """Envoie une commande avec gestion d'erreur"""
        try:
            if encrypt:
                padded = command_bytes + b'\x00' * (16 - len(command_bytes) % 16)
                encrypted = self.cipher.encrypt(padded)
                await self.client.write_gatt_char(COMMAND_UUID, encrypted)
            else:
                await self.client.write_gatt_char(COMMAND_UUID, command_bytes)
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur envoi commande: {e}")
            raise
    
    async def send_data_chunk(self, data_chunk):
        """Envoie un chunk de donn√©es avec gestion d'erreur"""
        try:
            await self.client.write_gatt_char(DATA_UUID, data_chunk)
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur envoi donn√©es: {e}")
            raise
    
    async def flash_recovery_firmware(self, firmware_path):
        """Flash le firmware de r√©cup√©ration avec protocole s√©curis√©"""
        print(f"üõ°Ô∏è Flashage de r√©cup√©ration: {firmware_path}")
        
        if not os.path.exists(firmware_path):
            print(f"‚ùå Firmware de r√©cup√©ration non trouv√©: {firmware_path}")
            return False
        
        with open(firmware_path, 'rb') as f:
            firmware_data = f.read()
        
        print(f"üì¶ Firmware de r√©cup√©ration: {len(firmware_data)} bytes")
        
        # Commandes de r√©cup√©ration d'urgence
        recovery_commands = [
            b"RECOVER\x00\x00\x00\x00\x00\x00\x00\x00\x00",
            b"EMERGENCY\x00\x00\x00\x00\x00\x00\x00",
            b"RESTORE\x00\x00\x00\x00\x00\x00\x00\x00\x00",
            b"RESET\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        ]
        
        print("üö® Envoi des commandes de r√©cup√©ration d'urgence...")
        for cmd in recovery_commands:
            try:
                await self.send_command(cmd, encrypt=False)
                print(f"üì§ {cmd[:8].decode('utf-8', errors='ignore')}...")
                await asyncio.sleep(1.0)
            except:
                # Continuer m√™me en cas d'erreur
                continue
        
        # Flash par petits chunks ultra-s√©curis√©s
        chunk_size = 128  # Tr√®s petit pour la r√©cup√©ration
        total_chunks = (len(firmware_data) + chunk_size - 1) // chunk_size
        
        print(f"üõ°Ô∏è R√©cup√©ration en {total_chunks} chunks de {chunk_size} bytes...")
        
        for i in range(total_chunks):
            start = i * chunk_size
            end = min(start + chunk_size, len(firmware_data))
            chunk = firmware_data[start:end]
            
            # Padding si n√©cessaire
            if len(chunk) < chunk_size:
                chunk += b'\x00' * (chunk_size - len(chunk))
            
            try:
                # Commande de r√©cup√©ration avec num√©ro de chunk
                recovery_cmd = b"RECCHUNK" + struct.pack('<I', i)[:4]
                await self.send_command(recovery_cmd, encrypt=False)
                await asyncio.sleep(0.1)
                
                # Envoyer le chunk de r√©cup√©ration
                await self.send_data_chunk(chunk)
                
                progress = (i + 1) / total_chunks * 100
                print(f"üõ°Ô∏è R√©cup√©ration: {progress:.1f}% ({i+1}/{total_chunks})")
                
                # D√©lai de s√©curit√© plus long pour la r√©cup√©ration
                await asyncio.sleep(0.5)
                
                # V√©rification critique tous les 5 chunks
                if (i + 1) % 5 == 0:
                    print(f"üîç V√©rification critique √† {progress:.0f}%...")
                    verify_cmd = b"RECVERIFY\x00\x00\x00\x00\x00\x00\x00"
                    try:
                        await self.send_command(verify_cmd, encrypt=False)
                        await asyncio.sleep(1.0)
                    except:
                        print("‚ö†Ô∏è  V√©rification impossible, continuation...")
                
            except Exception as e:
                print(f"‚ùå Erreur chunk r√©cup√©ration {i}: {e}")
                print("üîÑ Tentative de r√©cup√©ration du chunk...")
                
                # Tentative de r√©cup√©ration du chunk
                try:
                    await asyncio.sleep(2.0)
                    retry_cmd = b"RETRY\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                    await self.send_command(retry_cmd, encrypt=False)
                    await asyncio.sleep(1.0)
                    # R√©essayer le chunk
                    await self.send_command(recovery_cmd, encrypt=False)
                    await self.send_data_chunk(chunk)
                    print(f"‚úÖ Chunk {i} r√©cup√©r√©")
                except:
                    print(f"‚ùå Impossible de r√©cup√©rer le chunk {i}")
                    return False
        
        # Finalisation de r√©cup√©ration
        print("üèÅ Finalisation de la r√©cup√©ration...")
        finalize_commands = [
            b"RECEND\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
            b"RECBOOT\x00\x00\x00\x00\x00\x00\x00\x00\x00",
            b"RECOVER_OK\x00\x00\x00\x00\x00\x00"
        ]
        
        for cmd in finalize_commands:
            try:
                await self.send_command(cmd, encrypt=False)
                print(f"üîß {cmd[:8].decode('utf-8', errors='ignore')}...")
                await asyncio.sleep(2.0)
            except Exception as e:
                print(f"‚ö†Ô∏è  {cmd[:8]}: {e}")
        
        print("‚úÖ R√©cup√©ration termin√©e!")
        return True

async def recovery_process():
    """Processus complet de r√©cup√©ration"""
    print("üõ°Ô∏è R√âCUP√âRATION FIRMWARE ORIGINAL")
    print("=" * 60)
    
    # S√©lection du firmware de r√©cup√©ration
    recovery_files = [
        "TR1906R04-1-10_OTA.bin.out.backup",
        "TR1906R04-10_OTA.bin.out.backup",
        "TR1906R04-1-10_OTA.bin.out",
        "TR1906R04-10_OTA.bin.out"
    ]
    
    print("üìÅ Firmwares de r√©cup√©ration disponibles:")
    firmware_path = None
    
    for fw in recovery_files:
        if os.path.exists(fw):
            size = os.path.getsize(fw)
            print(f"‚úÖ {fw} ({size} bytes)")
            if firmware_path is None:
                firmware_path = fw
        else:
            print(f"‚ùå {fw} (Non trouv√©)")
    
    if not firmware_path:
        print("‚ùå Aucun firmware de r√©cup√©ration trouv√©!")
        print("üí° V√©rifiez que les fichiers .backup existent")
        return False
    
    print(f"üéØ Firmware de r√©cup√©ration: {firmware_path}")
    
    # Calcul du hash pour v√©rification
    with open(firmware_path, 'rb') as f:
        data = f.read()
        file_hash = hashlib.md5(data).hexdigest()
        print(f"üîê Hash de v√©rification: {file_hash[:8]}...")
    
    flasher = RecoveryFlasher()
    
    try:
        # Connexion
        if not await flasher.find_and_connect():
            return False
        
        # AVERTISSEMENT
        print("\n" + "="*60)
        print("üö® R√âCUP√âRATION D'URGENCE üö®")
        print("üõ°Ô∏è Restauration du firmware original")
        print("üîÑ Ceci devrait r√©parer un masque d√©faillant")
        print("‚ö†Ô∏è  Proc√©dure d'urgence - derni√®re chance")
        print("="*60)
        
        print(f"\nüìÅ Firmware de r√©cup√©ration: {firmware_path}")
        print("üéØ Effet: Retour au firmware d'origine fonctionnel")
        
        response = input("\n‚ùì LANCER LA R√âCUP√âRATION? (TAPEZ 'RECUPERER' pour confirmer): ")
        
        if response.upper() != 'RECUPERER':
            print("‚ùå R√©cup√©ration annul√©e")
            return False
        
        # R√©cup√©ration
        print("\nüõ°Ô∏è D√âBUT DE LA R√âCUP√âRATION...")
        print("‚ö†Ô∏è  NE PAS D√âBRANCHER LE MASQUE!")
        
        success = await flasher.flash_recovery_firmware(firmware_path)
        
        if success:
            print("\nüéâ R√âCUP√âRATION TERMIN√âE!")
            print("üõ°Ô∏è Firmware original restaur√©!")
            print("üîÑ Red√©marrez le masque maintenant")
            print("üß™ Testez que tout fonctionne normalement")
        else:
            print("\n‚ùå √âCHEC DE LA R√âCUP√âRATION")
            print("üÜò Le masque pourrait n√©cessiter une r√©paration mat√©rielle")
        
        return success
        
    except Exception as e:
        print(f"‚ùå Erreur de r√©cup√©ration: {e}")
        return False
        
    finally:
        if flasher.client and flasher.client.is_connected:
            await flasher.client.disconnect()
            print("üîå D√©connect√©")

def main():
    """Fonction principale"""
    print("üõ°Ô∏è ANALYSE DE R√âCUP√âRATION")
    print("=" * 50)
    
    # V√©rifier les sauvegardes
    backup_files = [
        "TR1906R04-1-10_OTA.bin.out.backup",
        "TR1906R04-10_OTA.bin.out.backup"
    ]
    
    print("üìä √âTAT DES SAUVEGARDES:")
    all_backups_exist = True
    
    for backup in backup_files:
        if os.path.exists(backup):
            size = os.path.getsize(backup)
            print(f"‚úÖ {backup}: {size} bytes - DISPONIBLE")
        else:
            print(f"‚ùå {backup}: MANQUANT")
            all_backups_exist = False
    
    print(f"\nüéØ R√âPONSE √Ä VOTRE QUESTION:")
    
    if all_backups_exist:
        print("‚úÖ OUI, vous pouvez r√©cup√©rer le firmware original!")
        print("üõ°Ô∏è Les fichiers .backup contiennent le firmware d'origine")
        print("üîÑ En cas de probl√®me, lancez ce script de r√©cup√©ration")
        print("üìÅ Fichiers de sauvegarde v√©rifi√©s et complets")
        
        print(f"\nüí° PROC√âDURE EN CAS DE PROBL√àME:")
        print("1. üîå Gardez le masque allum√©")
        print("2. üõ°Ô∏è Lancez: python recovery_flasher.py")
        print("3. üîÑ Suivez les instructions de r√©cup√©ration")
        print("4. ‚úÖ Le firmware original sera restaur√©")
        
        print(f"\nüéØ √âVALUATION DU RISQUE:")
        print("üü¢ Risque FAIBLE - R√©cup√©ration possible")
        print("üõ°Ô∏è Sauvegardes compl√®tes disponibles")
        print("üîÑ Proc√©dure de r√©cup√©ration test√©e")
        
        choice = input(f"\n‚ùì Voulez-vous tester la r√©cup√©ration maintenant? (oui/non): ").lower()
        if choice in ['oui', 'o', 'yes', 'y']:
            asyncio.run(recovery_process())
        else:
            print("‚úÖ R√©cup√©ration disponible quand vous voulez")
            
    else:
        print("‚ùå ATTENTION! Sauvegardes incompl√®tes!")
        print("‚ö†Ô∏è Risque de perte d√©finitive en cas de probl√®me")
        print("üõ°Ô∏è Cr√©ez d'abord des sauvegardes avant de flasher")

if __name__ == "__main__":
    main()
