"""
V√©rificateur d'√©tat du masque LED
Diagnostic des connexions et de l'√©tat du masque
"""

import asyncio
from bleak import BleakClient, BleakScanner
from Crypto.Cipher import AES

# Configuration
ENCRYPTION_KEY = bytes.fromhex('32672f7974ad43451d9c6c894a0e8764')
COMMAND_CHAR = "d44bc439-abfd-45a2-b575-925416129600"
NOTIFY_CHAR = "d44bc439-abfd-45a2-b575-925416129601"

async def check_mask_state():
    """V√©rifie l'√©tat du masque"""
    print("üîç V√âRIFICATION DE L'√âTAT DU MASQUE")
    print("=" * 40)
    
    # Recherche de p√©riph√©riques
    print("üì° Scan des p√©riph√©riques BLE...")
    devices = await BleakScanner.discover()
    
    mask_devices = []
    for device in devices:
        if "MASK" in (device.name or ""):
            mask_devices.append(device)
    
    if not mask_devices:
        print("‚ùå Aucun masque trouv√©")
        print("üí° V√©rifiez que le masque est allum√© et en mode appairage")
        return
    
    print(f"‚úÖ {len(mask_devices)} masque(s) trouv√©(s):")
    for i, mask in enumerate(mask_devices):
        print(f"  {i+1}. {mask.name} - {mask.address} (RSSI: {mask.rssi})")
    
    # Test de connexion
    mask = mask_devices[0]
    print(f"\nüîó Test de connexion avec {mask.name}...")
    
    try:
        client = BleakClient(mask.address)
        await client.connect()
        print("‚úÖ Connexion r√©ussie")
        
        # V√©rification des services
        print("\nüìã Services disponibles:")
        services = await client.get_services()
        for service in services:
            print(f"  Service: {service.uuid}")
            for char in service.characteristics:
                print(f"    Caract√©ristique: {char.uuid}")
                if "read" in char.properties:
                    print("      - Lecture support√©e")
                if "write" in char.properties:
                    print("      - √âcriture support√©e")
                if "notify" in char.properties:
                    print("      - Notifications support√©es")
        
        # Test de commande simple
        print("\nüß™ Test de commande simple...")
        cipher = AES.new(ENCRYPTION_KEY, AES.MODE_ECB)
        
        # Commande LIGHT avec luminosit√© 100
        cmd = b'\x06LIGHT\x64' + b'\x00' * 9
        encrypted = cipher.encrypt(cmd)
        
        await client.write_gatt_char(COMMAND_CHAR, encrypted)
        print("‚úÖ Commande envoy√©e avec succ√®s")
        
        await client.disconnect()
        print("üîå D√©connexion r√©ussie")
        
        print("\n‚úÖ DIAGNOSTIC COMPLET")
        print("Le masque fonctionne correctement")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        print("\nüîß Suggestions:")
        print("- Red√©marrez le masque")
        print("- V√©rifiez la distance (restez proche)")
        print("- Red√©marrez le Bluetooth")

if __name__ == "__main__":
    asyncio.run(check_mask_state())
