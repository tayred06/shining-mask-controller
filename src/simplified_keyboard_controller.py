#!/usr/bin/env python3
"""
Contr√¥leur Clavier Simplifi√© pour Masque LED 
===========================================

Version simplifi√©e inspir√©e de shining-mask avec contr√¥les clavier basiques.
Utilise les lettres et touches sp√©ciales au lieu des chiffres pour √©viter les conflits.
"""

import asyncio
import sys
import os
import time
import random
import threading
from queue import Queue

# Configuration du clavier 
try:
    import keyboard
    KEYBOARD_AVAILABLE = True
    print("‚úÖ Module keyboard disponible")
except ImportError:
    KEYBOARD_AVAILABLE = False
    print("‚ùå Module keyboard non disponible")

# Ajouter le r√©pertoire des modules au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from modules.text.scrolling_controller import ScrollingTextController
from modules.animations.stable_animation_controller import StableAnimationController
from modules.config.config_manager import ConfigManager

class SimplifiedKeyboardController(ScrollingTextController):
    """
    Contr√¥leur clavier simplifi√© pour le masque LED
    
    Bas√© sur le projet shining-mask mais avec contr√¥les clavier simplifi√©s :
    - Q,W,E,R,T = Images 1-5
    - A,S,D,F,G = Images 6-10  
    - Z,X,C,V,B = Images 11-15
    - Fl√®ches = Animations
    - Touches fonction = Effets sp√©ciaux
    """
    
    def __init__(self):
        super().__init__()
        
        # Contr√¥leurs additionnels
        self.animation_controller = StableAnimationController()
        self.config_manager = ConfigManager()
        
        # √âtat du contr√¥leur
        self.current_image = 1
        self.is_running = False
        self.can_blink = True
        self.auto_blink_enabled = True
        
        # Commandes en attente
        self.command_queue = Queue()
        
        # Images pr√©charg√©es remplac√©es par patterns texte
        self.text_patterns = self.generate_text_patterns()
        
        # Importer le contr√¥leur de texte pour l'affichage
        from modules.text.scrolling_controller import ScrollingTextController
        self.text_controller = ScrollingTextController()
        
        print("üéÆ Contr√¥leur Clavier Simplifi√© initialis√©!")

    def generate_text_patterns(self):
        """G√©n√®re les 20 patterns texte pour remplacer les images pr√©charg√©es"""
        patterns = [
            # Images 1-5: √âmotions de base (Q W E R T)
            {"text": ":)", "color": (255, 255, 0)},      # 1 - Q - Sourire
            {"text": ":|", "color": (255, 255, 255)},     # 2 - W - Neutre
            {"text": ":(", "color": (0, 100, 255)},       # 3 - E - Triste
            {"text": ":O", "color": (255, 100, 0)},       # 4 - R - Surpris
            {"text": ">:(", "color": (255, 0, 0)},        # 5 - T - Col√®re
            
            # Images 6-10: √âmotions avanc√©es (A S D F G)
            {"text": ";)", "color": (255, 255, 0)},       # 6 - A - Clin ≈ìil (clignotement)
            {"text": "-_-", "color": (100, 100, 100)},   # 7 - S - Endormi (clignotement)
            {"text": "<3", "color": (255, 0, 100)},       # 8 - D - C≈ìur
            {"text": "B)", "color": (0, 255, 255)},       # 9 - F - Cool
            {"text": "X_X", "color": (255, 0, 255)},      # 10 - G - √âtourdi
            
            # Images 11-15: Symboles (Z X C V B)
            {"text": "*", "color": (255, 255, 0)},        # 11 - Z - √âtoile
            {"text": "o", "color": (255, 255, 255)},      # 12 - X - Rond (remplace ‚ñ†)
            {"text": "O", "color": (0, 255, 0)},          # 13 - C - Grand rond
            {"text": "+", "color": (255, 0, 0)},          # 14 - V - Plus
            {"text": "?", "color": (255, 255, 0)},        # 15 - B - Question
            
            # Images 16-20: Texte et effets (extension)
            {"text": "OK", "color": (0, 255, 0)},         # 16 - OK
            {"text": "NO", "color": (255, 0, 0)},         # 17 - Non
            {"text": "YES", "color": (0, 255, 0)},        # 18 - Oui
            {"text": "!", "color": (255, 100, 0)},        # 19 - Exclamation
            {"text": "HI", "color": (0, 255, 255)},       # 20 - Salut
        ]
        
        return patterns
    
    def setup_keyboard_hooks(self):
        """Configure les hooks clavier de mani√®re simplifi√©e"""
        if not KEYBOARD_AVAILABLE:
            return False
            
        try:
            # Images ligne 1 (QWERT = images 1-5)
            keyboard.add_hotkey('q', lambda: self.queue_command('image', 1))
            keyboard.add_hotkey('w', lambda: self.queue_command('image', 2))
            keyboard.add_hotkey('e', lambda: self.queue_command('image', 3))
            keyboard.add_hotkey('r', lambda: self.queue_command('image', 4))
            keyboard.add_hotkey('t', lambda: self.queue_command('image', 5))
            
            # Images ligne 2 (ASDFG = images 6-10)
            keyboard.add_hotkey('a', lambda: self.queue_command('image', 6))
            keyboard.add_hotkey('s', lambda: self.queue_command('image', 7))
            keyboard.add_hotkey('d', lambda: self.queue_command('image', 8))
            keyboard.add_hotkey('f', lambda: self.queue_command('image', 9))
            keyboard.add_hotkey('g', lambda: self.queue_command('image', 10))
            
            # Images ligne 3 (ZXCVB = images 11-15)
            keyboard.add_hotkey('z', lambda: self.queue_command('image', 11))
            keyboard.add_hotkey('x', lambda: self.queue_command('image', 12))
            keyboard.add_hotkey('c', lambda: self.queue_command('image', 13))
            keyboard.add_hotkey('v', lambda: self.queue_command('image', 14))
            keyboard.add_hotkey('b', lambda: self.queue_command('image', 15))
            
            # Animations avec fl√®ches
            keyboard.add_hotkey('up', lambda: self.queue_command('animation', 'pulse'))
            keyboard.add_hotkey('down', lambda: self.queue_command('animation', 'wave'))
            keyboard.add_hotkey('left', lambda: self.queue_command('animation', 'fire'))
            keyboard.add_hotkey('right', lambda: self.queue_command('animation', 'rain'))
            keyboard.add_hotkey('space', lambda: self.queue_command('animation', 'matrix'))
            
            # Actions sp√©ciales
            keyboard.add_hotkey('enter', lambda: self.queue_command('action', 'blink'))
            keyboard.add_hotkey('backspace', lambda: self.queue_command('action', 'random'))
            keyboard.add_hotkey('tab', lambda: self.queue_command('action', 'clear'))
            
            # Couleurs avec Shift+lettre
            keyboard.add_hotkey('shift+r', lambda: self.queue_command('color', 'red'))
            keyboard.add_hotkey('shift+g', lambda: self.queue_command('color', 'green'))
            keyboard.add_hotkey('shift+b', lambda: self.queue_command('color', 'blue'))
            keyboard.add_hotkey('shift+w', lambda: self.queue_command('color', 'white'))
            
            # Contr√¥le
            keyboard.add_hotkey('h', lambda: self.show_help())
            keyboard.add_hotkey('esc', lambda: self.queue_command('system', 'quit'))
            
            print("‚å®Ô∏è Hooks clavier configur√©s!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur configuration clavier: {e}")
            return False
    
    def queue_command(self, command_type: str, value):
        """Ajoute une commande √† la queue"""
        self.command_queue.put((command_type, value))
        print(f"üéØ Commande: {command_type} = {value}")
    
    def show_help(self):
        """Affiche l'aide des commandes"""
        help_text = f"""
üéÆ === CONTR√îLEUR CLAVIER MASQUE LED ===

ÔøΩ PATTERNS TEXTE (remplacent les images):
   Q W E R T  ‚Üí :) :| :( :O >:(
   A S D F G  ‚Üí ;) -_- <3 B) X_X  
   Z X C V B  ‚Üí * o O + ?

üé¨ ANIMATIONS:
   ‚Üë          ‚Üí Pulse
   ‚Üì          ‚Üí Wave  
   ‚Üê          ‚Üí Fire
   ‚Üí          ‚Üí Rain
   SPACE      ‚Üí Matrix

üé≠ ACTIONS:
   ENTER      ‚Üí Clignotement
   BACKSPACE  ‚Üí Pattern al√©atoire
   TAB        ‚Üí R√©initialiser

üé® COULEURS:
   Shift+R    ‚Üí Rouge
   Shift+G    ‚Üí Vert
   Shift+B    ‚Üí Bleu  
   Shift+W    ‚Üí Blanc

‚öôÔ∏è CONTR√îLES:
   H          ‚Üí Cette aide
   ESC        ‚Üí Quitter

üéØ PATTERN ACTUEL: {self.current_image}
üîó STATUT: {'Connect√©' if self.client and self.client.is_connected else 'D√©connect√©'}
"""
        print(help_text)
    
    async def connect(self):
        """Connexion au masque"""
        try:
            success = await super().connect()
            if success:
                self.animation_controller.client = self.client
                print("‚úÖ Masque connect√©!")
                return True
            return False
        except Exception as e:
            print(f"‚ùå Erreur connexion: {e}")
            return False
    
    async def send_text_pattern(self, pattern_id: int):
        """Affiche un pattern texte √† la place d'une image pr√©charg√©e"""
        try:
            if 1 <= pattern_id <= 20:
                pattern = self.text_patterns[pattern_id - 1]
                
                # Utiliser le syst√®me de texte existant pour afficher
                # (mais nous devons d'abord nous assurer que client est disponible)
                if not self.client or not self.client.is_connected:
                    print("‚ùå Non connect√© au masque")
                    return False
                
                # Temporairement, on utilise notre contr√¥leur de texte
                from working.complete_text_display import MaskTextDisplay
                temp_controller = MaskTextDisplay()
                temp_controller.client = self.client  # R√©utiliser la connexion existante
                
                await temp_controller.display_text(pattern['text'], color=pattern['color'])
                
                self.current_image = pattern_id
                print(f"ÔøΩ Pattern {pattern_id} ('{pattern['text']}') affich√©")
                return True
            else:
                print(f"‚ùå Pattern {pattern_id} invalide (1-20)")
                return False
        except Exception as e:
            print(f"‚ùå Erreur affichage pattern: {e}")
            return False
    
    async def trigger_blink_sequence(self):
        """S√©quence de clignotement avec patterns texte"""
        if not self.can_blink:
            return
            
        try:
            self.can_blink = False
            print("üëÅÔ∏è Clignotement...")
            
            # S√©quence de clignotement avec les patterns texte appropri√©s
            blink_sequence = [6, 7, 7, 6]  # Patterns "clin ≈ìil" et "endormi"
            
            for pattern_id in blink_sequence:
                await self.send_text_pattern(pattern_id)
                await asyncio.sleep(1/12)  # 12 FPS comme l'original
            
            # Retourner au pattern pr√©c√©dent
            await self.send_text_pattern(self.current_image)
            
            # D√©lai avant prochain clignotement
            await asyncio.sleep(1.0)
            self.can_blink = True
            
        except Exception as e:
            print(f"‚ùå Erreur clignotement: {e}")
            self.can_blink = True
    
    async def auto_blink_loop(self):
        """Boucle de clignotement automatique"""
        while self.is_running:
            try:
                if self.auto_blink_enabled and self.can_blink:
                    # 4% de chance de cligner (comme shining-mask)
                    if random.randint(0, 100) < 4:
                        await self.trigger_blink_sequence()
                
                await asyncio.sleep(0.1)
                
            except Exception as e:
                print(f"‚ùå Erreur auto-blink: {e}")
                await asyncio.sleep(1.0)
    
    async def process_commands(self):
        """Traite les commandes du clavier"""
        while self.is_running:
            try:
                if not self.command_queue.empty():
                    command_type, value = self.command_queue.get()
                    
                    if command_type == 'image':
                        await self.send_text_pattern(value)
                        
                    elif command_type == 'animation':
                        print(f"üé¨ Animation: {value}")
                        await self.animation_controller.play_simple_animation(value, 3.0)
                        
                    elif command_type == 'action':
                        await self.handle_action(value)
                        
                    elif command_type == 'color':
                        await self.handle_color_change(value)
                        
                    elif command_type == 'system':
                        if value == 'quit':
                            print("üëã Arr√™t demand√©")
                            self.is_running = False
                            break
                
                await asyncio.sleep(0.05)  # 20 FPS
                
            except Exception as e:
                print(f"‚ùå Erreur traitement: {e}")
                await asyncio.sleep(0.1)
    
    async def handle_action(self, action: str):
        """G√®re les actions sp√©ciales"""
        if action == 'blink':
            await self.trigger_blink_sequence()
            
        elif action == 'random':
            random_pattern = random.randint(1, 15)  # Limit√© aux patterns mapp√©s
            await self.send_text_pattern(random_pattern)
            print(f"üé≤ Pattern al√©atoire: {random_pattern}")
            
        elif action == 'clear':
            # Afficher un pattern vide ou effacer
            await self.send_text_pattern(2)  # Pattern neutre ":|"
            print("üóëÔ∏è Affichage r√©initialis√©")
    
    async def handle_color_change(self, color: str):
        """Change la couleur"""
        color_map = {
            'red': "FCFF0000",
            'green': "FC00FF00", 
            'blue': "FC0000FF",
            'white': "FCFFFFFF"
        }
        
        if color in color_map:
            await self.send_command(color_map[color].encode())
            print(f"üé® Couleur: {color}")
    
    async def run(self):
        """Boucle principale"""
        # Connexion
        if not await self.connect():
            print("‚ùå Impossible de se connecter au masque")
            return
        
        # Configuration clavier
        if not self.setup_keyboard_hooks():
            print("‚ùå Impossible de configurer le clavier")
            return
        
        self.is_running = True
        
        try:
            print("üöÄ Contr√¥leur clavier d√©marr√©!")
            self.show_help()
            
            # D√©marrer les t√¢ches parall√®les
            await asyncio.gather(
                self.process_commands(),
                self.auto_blink_loop()
            )
            
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Interruption")
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
        finally:
            self.is_running = False
            if self.client:
                await self.client.disconnect()
            print("üëã Contr√¥leur arr√™t√©")

async def main():
    """Point d'entr√©e"""
    if not KEYBOARD_AVAILABLE:
        print("‚ùå Module keyboard requis:")
        print("   pip install keyboard")
        return
    
    controller = SimplifiedKeyboardController()
    await controller.run()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Au revoir!")
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
