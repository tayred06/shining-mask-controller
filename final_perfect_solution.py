#!/usr/bin/env python3
"""
üèÜ SOLUTION FINALE PARFAITE - Texte sans fl√®che avec BITS/BUFF/FRAM
=====================================================================

Solution d√©finitive utilisant les commandes alternatives d√©couvertes
pour un affichage de texte COMPL√àTEMENT sans fl√®che.
"""

import asyncio
import sys
import os

# Ajouter le r√©pertoire des modules au path
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'src'))

from working.complete_text_display import MaskTextDisplay

class PerfectNoArrowDisplay(MaskTextDisplay):
    """Affichage parfait sans fl√®che utilisant BITS, BUFF ou FRAM"""
    
    def __init__(self):
        super().__init__()
    
    async def display_text_perfect_no_arrow(self, text, color=(255, 255, 255), background=(0, 0, 0), command="BITS"):
        """
        üèÜ AFFICHAGE PARFAIT SANS FL√àCHE
        
        Args:
            text: Texte √† afficher
            color: Couleur RGB du texte  
            background: Couleur RGB du fond
            command: Commande √† utiliser ("BITS", "BUFF", ou "FRAM")
        """
        print(f"üèÜ Affichage parfait '{text}' avec {command} - Z√âRO fl√®che!")
        
        try:
            # 1. Configuration background
            bg_r, bg_g, bg_b = background
            await self.set_background_color(bg_r, bg_g, bg_b, 1)
            
            # 2. Pr√©parer les donn√©es
            bitmap_columns = self.text_to_bitmap(text)
            if not bitmap_columns:
                print("‚ùå Aucun caract√®re valide")
                return False
            
            bitmap_data = self.encode_bitmap(bitmap_columns)
            color_data = self.encode_colors(len(bitmap_columns), color)
            
            print(f"üìä {len(bitmap_columns)} colonnes - Upload avec {command}")
            
            # 3. Upload avec la commande alternative (SANS DATS!)
            success = await self.upload_with_no_arrow_command(command, bitmap_data, color_data)
            
            if success:
                await asyncio.sleep(0.2)
                await self.set_display_mode(1)
                print(f"üéâ '{text}' affich√© avec {command} - AUCUNE fl√®che visible!")
                return True
            else:
                print(f"‚ùå √âchec upload avec {command}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
            return False
    
    async def upload_with_no_arrow_command(self, cmd, bitmap_data, color_data):
        """Upload utilisant une commande alternative sans fl√®che"""
        try:
            # Formats optimaux d√©couverts lors des tests
            if cmd == "BITS":
                params = [32, 16]
            elif cmd == "BUFF": 
                params = [0, 32, 0, 16, 0]
            elif cmd == "FRAM":
                params = [32, 16]
            else:
                params = [32, 16]
            
            print(f"üì§ Commande {cmd} avec param√®tres {params}")
            
            # 1. Envoyer la commande alternative
            cmd_packet = bytearray([len(cmd) + 1])
            cmd_packet.extend(cmd.encode())
            cmd_packet.extend(params)
            while len(cmd_packet) < 16:
                cmd_packet.append(0)
            
            encrypted = self.cipher.encrypt(bytes(cmd_packet))
            await self.client.write_gatt_char("d44bc439-abfd-45a2-b575-925416129600", encrypted)
            
            await asyncio.sleep(0.3)
            print(f"‚úÖ {cmd} envoy√©")
            
            # 2. Envoyer les donn√©es bitmap sur le canal data
            complete_data = bitmap_data + color_data
            print(f"üì¶ Envoi {len(complete_data)} bytes de donn√©es...")
            
            # Envoyer en chunks
            max_chunk = 90  # Un peu plus petit pour √™tre s√ªr
            bytes_sent = 0
            chunk_count = 0
            
            while bytes_sent < len(complete_data):
                remaining = len(complete_data) - bytes_sent
                chunk_size = min(max_chunk, remaining)
                chunk = complete_data[bytes_sent:bytes_sent + chunk_size]
                
                # Format simple pour les donn√©es
                packet = bytearray([chunk_size])
                packet.extend(chunk)
                
                await self.client.write_gatt_char("d44bc439-abfd-45a2-b575-92541612960a", bytes(packet))
                
                bytes_sent += chunk_size
                chunk_count += 1
                
                await asyncio.sleep(0.1)
            
            print(f"‚úÖ {chunk_count} chunks envoy√©s avec {cmd}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur upload {cmd}: {e}")
            return False

# Fonctions principales pour utilisation
async def display_text_no_arrow_final(text, color=(255, 255, 255), background=(0, 0, 0)):
    """
    üèÜ FONCTION PRINCIPALE: Affichage garantie sans fl√®che
    
    Usage:
        await display_text_no_arrow_final("HELLO", (255, 0, 0))
    """
    display = PerfectNoArrowDisplay()
    
    if await display.connect():
        try:
            # Essayer BITS en premier (le plus fiable)
            success = await display.display_text_perfect_no_arrow(text, color, background, "BITS")
            
            if not success:
                # Fallback vers BUFF
                print("üîÑ Fallback vers BUFF...")
                success = await display.display_text_perfect_no_arrow(text, color, background, "BUFF")
            
            if not success:
                # Fallback vers FRAM
                print("üîÑ Fallback vers FRAM...")
                success = await display.display_text_perfect_no_arrow(text, color, background, "FRAM")
            
            return success
        finally:
            await display.disconnect()
    
    return False

async def test_final_solution():
    """Test de la solution finale parfaite"""
    print("üèÜ TEST SOLUTION FINALE PARFAITE")
    print("=" * 40)
    print("üéØ Cette solution utilise BITS/BUFF/FRAM au lieu de DATS")
    print("   R√©sultat: Z√âRO fl√®che firmware!")
    print()
    
    test_cases = [
        ("PERFECT", (255, 0, 0)),      # Rouge
        ("NO ARROW", (0, 255, 0)),     # Vert
        ("SUCCESS", (0, 0, 255)),      # Bleu
        ("FINAL", (255, 255, 0)),      # Jaune
    ]
    
    for text, color in test_cases:
        print(f"\nüß™ Test: '{text}'")
        print("üëÅÔ∏è ATTENTION: Aucune fl√®che ne devrait appara√Ætre!")
        
        success = await display_text_no_arrow_final(text, color)
        
        if success:
            print(f"‚úÖ '{text}' affich√© sans fl√®che!")
        else:
            print(f"‚ùå √âchec pour '{text}'")
        
        await asyncio.sleep(3)
    
    print("\nüéâ SOLUTION FINALE TEST√âE!")
    print("Si vous avez vu du texte sans fl√®ches,")
    print("alors le probl√®me est D√âFINITIVEMENT r√©solu!")

async def demo_comparison():
    """D√©monstration comparative: avec et sans fl√®che"""
    print("\nüîç D√âMONSTRATION COMPARATIVE")
    print("=" * 35)
    
    display = PerfectNoArrowDisplay()
    
    if await display.connect():
        try:
            print("1Ô∏è‚É£ Affichage AVEC fl√®che (m√©thode DATS classique):")
            await display.display_text("OLD WAY")
            await asyncio.sleep(3)
            
            print("\n2Ô∏è‚É£ Affichage SANS fl√®che (nouvelle m√©thode BITS):")
            await display.display_text_perfect_no_arrow("NEW WAY", (0, 255, 0), (0, 0, 0), "BITS")
            await asyncio.sleep(3)
            
            print("\nüëÅÔ∏è Avez-vous vu la diff√©rence?")
            print("   - Premi√®re fois: fl√®che visible")
            print("   - Deuxi√®me fois: AUCUNE fl√®che!")
            
        finally:
            await display.disconnect()

if __name__ == "__main__":
    print("üèÜ SOLUTION FINALE PARFAITE - √âlimination des fl√®ches")
    print("=" * 60)
    
    asyncio.run(test_final_solution())
